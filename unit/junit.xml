<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="1718" failures="0" errors="0" time="13.089">
  <testsuite name="react-hooks" errors="0" failures="0" skipped="0" timestamp="2023-03-18T07:51:53" time="11.693" tests="1718">
    <testcase classname="react-hooks parser: babel-eslint valid 
function Example({ prop }) {
  const bar = useEffect(&lt;T&gt;(a: T): Hello =&gt; {
    prop();
  }, [prop]);
}
" name="react-hooks parser: babel-eslint valid 
function Example({ prop }) {
  const bar = useEffect(&lt;T&gt;(a: T): Hello =&gt; {
    prop();
  }, [prop]);
}
" time="0.606">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  });
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  });
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  useEffect(() =&gt; {
    const local = {};
    console.log(local);
  }, []);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  useEffect(() =&gt; {
    const local = {};
    console.log(local);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local1 = {};
  {
    const local2 = {};
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    });
  }
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local1 = {};
  {
    const local2 = {};
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    });
  }
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1, local2]);
  }
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1, local2]);
  }
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local2]);
  }
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local2]);
  }
}
" time="0.011">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(unresolved);
  }, []);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(unresolved);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [,,,local,,,]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [,,,local,,,]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
  }, [foo]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
  }, [foo]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
    console.log(foo.slice(0));
  }, [foo]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
    console.log(foo.slice(0));
  }, [foo]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, [history]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, [history]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {});
  useLayoutEffect(() =&gt; {});
  useImperativeHandle(props.innerRef, () =&gt; {});
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {});
  useLayoutEffect(() =&gt; {});
  useImperativeHandle(props.innerRef, () =&gt; {});
}
" time="0.014">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.bar, props.foo]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.bar, props.foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.foo, props.bar]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.foo, props.bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props.foo, props.bar, local]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props.foo, props.bar, local]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);

  let color = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz, color]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);

  let color = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz, color]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar?.baz ?? null);
  }, [props.foo]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar?.baz ?? null);
  }, [props.foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo?.bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.foo?.bar);
  }, [props.foo]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.foo?.bar);
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useMemo(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useMemo(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar?.toString());
  }, [props.foo.bar]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar?.toString());
  }, [props.foo.bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.toString());
  }, [props.foo.bar]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.toString());
  }, [props.foo.bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar.toString());
  }, [props?.foo?.bar]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar.toString());
  }, [props?.foo?.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, [props?.foo.bar?.baz]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, [props?.foo.bar?.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const myEffect = () =&gt; {
    // Doesn&apos;t use anything
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const myEffect = () =&gt; {
    // Doesn&apos;t use anything
  };
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: babel-eslint valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
const local = {};
function MyComponent() {
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: babel-eslint valid 
const local = {};
function MyComponent() {
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local = someFunc();
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, [local]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local = someFunc();
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  function myEffect() {
    console.log(global);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  function myEffect() {
    console.log(global);
  }
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    otherThing()
  }
  const otherThing = () =&gt; {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: babel-eslint valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    otherThing()
  }
  const otherThing = () =&gt; {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent({delay}) {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [myEffect]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent({delay}) {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [myEffect]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect,,]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect,,]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
let local = {};
function myEffect() {
  console.log(local);
}
function MyComponent() {
  useEffect(myEffect, []);
}
" name="react-hooks parser: babel-eslint valid 
let local = {};
function myEffect() {
  console.log(local);
}
function MyComponent() {
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [myEffect]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [myEffect]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent({myEffect}) {
  useEffect(myEffect);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent({myEffect}) {
  useEffect(myEffect);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  });
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useWithoutEffectSuffix(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useWithoutEffectSuffix(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  return renderHelperConfusedWithEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  return renderHelperConfusedWithEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
const local = {};
useEffect(() =&gt; {
  console.log(local);
}, []);
" name="react-hooks parser: babel-eslint valid 
const local = {};
useEffect(() =&gt; {
  console.log(local);
}, []);
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
const local1 = {};
{
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, []);
}
" name="react-hooks parser: babel-eslint valid 
const local1 = {};
{
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent({ maybeRef2, foo }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();
  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();
  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();
  const [isPending1] = useTransition();
  const [isPending2, startTransition2] = useTransition();
  const [isPending3] = React.useTransition();
  const [isPending4, startTransition4] = React.useTransition();
  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();
    startTransition1();
    startTransition2();
    startTransition3();
    startTransition4();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    console.log(isPending2);
    console.log(isPending4);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,
    isPending2, isPending4,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch

    // In this test, we don&apos;t specify static deps.
    // That should be okay.
  ]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent({ maybeRef2, foo }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();
  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();
  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();
  const [isPending1] = useTransition();
  const [isPending2, startTransition2] = useTransition();
  const [isPending3] = React.useTransition();
  const [isPending4, startTransition4] = React.useTransition();
  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();
    startTransition1();
    startTransition2();
    startTransition3();
    startTransition4();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    console.log(isPending2);
    console.log(isPending4);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,
    isPending2, isPending4,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch

    // In this test, we don&apos;t specify static deps.
    // That should be okay.
  ]);
}
" time="0.017">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent({ maybeRef2 }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();

  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();

  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();

  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch,

    // In this test, we specify static deps.
    // That should be okay too!
    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2
  ]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent({ maybeRef2 }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();

  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();

  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();

  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch,

    // In this test, we specify static deps.
    // That should be okay too!
    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2
  ]);
}
" time="0.012">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }))
});
" name="react-hooks parser: babel-eslint valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }))
});
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [props.hello])
});
" name="react-hooks parser: babel-eslint valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [props.hello])
});
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  let obj = someFunc();
  useEffect(() =&gt; {
    obj.foo = true;
  }, [obj]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  let obj = someFunc();
  useEffect(() =&gt; {
    obj.foo = true;
  }, [obj]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
  }, [foo.bar]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
  }, [foo.bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef?.current?.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef?.current?.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, [myRef]);
}
" name="react-hooks parser: babel-eslint valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, [myRef]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: babel-eslint valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function useMyThing(myRef) {
  useCallback(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" name="react-hooks parser: babel-eslint valid 
function useMyThing(myRef) {
  useCallback(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      console.log(myRef.current)
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: babel-eslint valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      console.log(myRef.current)
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; {};
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: babel-eslint valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; {};
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, []);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, [local1, local2, local3]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, [local1, local2, local3]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  const local = props.local;
  useEffect(() =&gt; {}, [local]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  const local = props.local;
  useEffect(() =&gt; {}, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Foo({ activeTab }) {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [activeTab]);
}
" name="react-hooks parser: babel-eslint valid 
function Foo({ activeTab }) {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [activeTab]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  const fn2 = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  const fn3 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  const fn4 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  const fn2 = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  const fn3 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  const fn4 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  function handleNext() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  function handleNext() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();

  function handleNext1(value) {
    let value2 = value * 100;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(foo(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(value);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();

  function handleNext1(value) {
    let value2 = value * 100;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(foo(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(value);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function useInterval(callback, delay) {
  const savedCallback = useRef();
  useEffect(() =&gt; {
    savedCallback.current = callback;
  });
  useEffect(() =&gt; {
    function tick() {
      savedCallback.current();
    }
    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () =&gt; clearInterval(id);
    }
  }, [delay]);
}
" name="react-hooks parser: babel-eslint valid 
function useInterval(callback, delay) {
  const savedCallback = useRef();
  useEffect(() =&gt; {
    savedCallback.current = callback;
  });
  useEffect(() =&gt; {
    function tick() {
      savedCallback.current();
    }
    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () =&gt; clearInterval(id);
    }
  }, [delay]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint valid 
function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [setCount]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint valid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [setCount]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(c =&gt; c + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint valid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(c =&gt; c + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      dispatch(&apos;inc&apos;);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      dispatch(&apos;inc&apos;);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  const tick = () =&gt; {
    dispatch(&apos;inc&apos;);
  };

  useEffect(() =&gt; {
    let id = setInterval(tick, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  const tick = () =&gt; {
    dispatch(&apos;inc&apos;);
  };

  useEffect(() =&gt; {
    let id = setInterval(tick, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Podcasts() {
  useEffect(() =&gt; {
    setPodcasts([]);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" name="react-hooks parser: babel-eslint valid 
function Podcasts() {
  useEffect(() =&gt; {
    setPodcasts([]);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function withFetch(fetchPodcasts) {
  return function Podcasts({ id }) {
    let [podcasts, setPodcasts] = useState(null);
    useEffect(() =&gt; {
      fetchPodcasts(id).then(setPodcasts);
    }, [id]);
  }
}
" name="react-hooks parser: babel-eslint valid 
function withFetch(fetchPodcasts) {
  return function Podcasts({ id }) {
    let [podcasts, setPodcasts] = useState(null);
    useEffect(() =&gt; {
      fetchPodcasts(id).then(setPodcasts);
    }, [id]);
  }
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Podcasts({ id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    function doFetch({ fetchPodcasts }) {
      fetchPodcasts(id).then(setPodcasts);
    }
    doFetch({ fetchPodcasts: API.fetchPodcasts });
  }, [id]);
}
" name="react-hooks parser: babel-eslint valid 
function Podcasts({ id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    function doFetch({ fetchPodcasts }) {
      fetchPodcasts(id).then(setPodcasts);
    }
    doFetch({ fetchPodcasts: API.fetchPodcasts });
  }, [id]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
import increment from &apos;./increment&apos;;
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint valid 
import increment from &apos;./increment&apos;;
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function withStuff(increment) {
  return function Counter() {
    let [count, setCount] = useState(0);

    useEffect(() =&gt; {
      let id = setInterval(() =&gt; {
        setCount(count =&gt; count + increment);
      }, 1000);
      return () =&gt; clearInterval(id);
    }, []);

    return &lt;h1&gt;{count}&lt;/h1&gt;;
  }
}
" name="react-hooks parser: babel-eslint valid 
function withStuff(increment) {
  return function Counter() {
    let [count, setCount] = useState(0);

    useEffect(() =&gt; {
      let id = setInterval(() =&gt; {
        setCount(count =&gt; count + increment);
      }, 1000);
      return () =&gt; clearInterval(id);
    }, []);

    return &lt;h1&gt;{count}&lt;/h1&gt;;
  }
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function App() {
  const [query, setQuery] = useState(&apos;react&apos;);
  const [state, setState] = useState(null);
  useEffect(() =&gt; {
    let ignore = false;
    fetchSomething();
    async function fetchSomething() {
      const result = await (await fetch(&apos;http://hn.algolia.com/api/v1/search?query=&apos; + query)).json();
      if (!ignore) setState(result);
    }
    return () =&gt; { ignore = true; };
  }, [query]);
  return (
    &lt;&gt;
      &lt;input value={query} onChange={e =&gt; setQuery(e.target.value)} /&gt;
      {JSON.stringify(state)}
    &lt;/&gt;
  );
}
" name="react-hooks parser: babel-eslint valid 
function App() {
  const [query, setQuery] = useState(&apos;react&apos;);
  const [state, setState] = useState(null);
  useEffect(() =&gt; {
    let ignore = false;
    fetchSomething();
    async function fetchSomething() {
      const result = await (await fetch(&apos;http://hn.algolia.com/api/v1/search?query=&apos; + query)).json();
      if (!ignore) setState(result);
    }
    return () =&gt; { ignore = true; };
  }, [query]);
  return (
    &lt;&gt;
      &lt;input value={query} onChange={e =&gt; setQuery(e.target.value)} /&gt;
      {JSON.stringify(state)}
    &lt;/&gt;
  );
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, []);
}
" name="react-hooks parser: babel-eslint valid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    if (prop) {
      foo();
    }
  }, [prop]);
}
" name="react-hooks parser: babel-eslint valid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    if (prop) {
      foo();
    }
  }, [prop]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    const handleResize = () =&gt; setState(window.innerWidth);
    window.addEventListener(&apos;resize&apos;, handleResize);
    return () =&gt; window.removeEventListener(&apos;resize&apos;, handleResize);
  });
}
" name="react-hooks parser: babel-eslint valid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    const handleResize = () =&gt; setState(window.innerWidth);
    window.addEventListener(&apos;resize&apos;, handleResize);
    return () =&gt; window.removeEventListener(&apos;resize&apos;, handleResize);
  });
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Example() {
  useEffect(() =&gt; {
    arguments
  }, [])
}
" name="react-hooks parser: babel-eslint valid 
function Example() {
  useEffect(() =&gt; {
    arguments
  }, [])
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Example() {
  useEffect(() =&gt; {
    const bar = () =&gt; {
      arguments;
    };
    bar();
  }, [])
}
" name="react-hooks parser: babel-eslint valid 
function Example() {
  useEffect(() =&gt; {
    const bar = () =&gt; {
      arguments;
    };
    bar();
  }, [])
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, [props.upperViewHeight]);
}
" name="react-hooks parser: babel-eslint valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, [props.upperViewHeight]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props?.upperViewHeight]);
}
" name="react-hooks parser: babel-eslint valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props?.upperViewHeight]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props]);
}
" name="react-hooks parser: babel-eslint valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function useFoo(foo){
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint valid 
function useFoo(foo){
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function useFoo(){
  const foo = &quot;hi!&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint valid 
function useFoo(){
  const foo = &quot;hi!&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function useFoo(){
  let {foo} = {foo: 1};
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint valid 
function useFoo(){
  let {foo} = {foo: 1};
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function useFoo(){
  let [foo] = [1];
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint valid 
function useFoo(){
  let [foo] = [1];
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function useFoo() {
  const foo = &quot;fine&quot;;
  if (true) {
    // Shadowed variable with constant construction in a nested scope is fine.
    const foo = {};
  }
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint valid 
function useFoo() {
  const foo = &quot;fine&quot;;
  if (true) {
    // Shadowed variable with constant construction in a nested scope is fine.
    const foo = {};
  }
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent({foo}) {
  return useMemo(() =&gt; foo, [foo])
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent({foo}) {
  return useMemo(() =&gt; foo, [foo])
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const foo = true ? &quot;fine&quot; : &quot;also fine&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint valid 
function MyComponent() {
  const foo = true ? &quot;fine&quot; : &quot;also fine&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = ({}: any);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = ({}: any);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.baz);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.toString());
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.toString());
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint invalid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  let local = 42;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  let local = 42;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = /foo/;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = /foo/;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const value = useMemo(() =&gt; { return 2*2; });
  const fn = useCallback(() =&gt; { alert(&apos;foo&apos;); });
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const value = useMemo(() =&gt; { return 2*2; });
  const fn = useCallback(() =&gt; { alert(&apos;foo&apos;); });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent({ fn1, fn2 }) {
  const value = useMemo(fn1);
  const fn = useCallback(fn2);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent({ fn1, fn2 }) {
  const value = useMemo(fn1);
  const fn = useCallback(fn2);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  useEffect()
  useLayoutEffect()
  useCallback()
  useMemo()
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  useEffect()
  useLayoutEffect()
  useCallback()
  useMemo()
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    if (true) {
      console.log(local);
    }
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    if (true) {
      console.log(local);
    }
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    try {
      console.log(local);
    } finally {}
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    try {
      console.log(local);
    } finally {}
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    function inner() {
      console.log(local);
    }
    inner();
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    function inner() {
      console.log(local);
    }
    inner();
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, []);
  }
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, []);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, [local1]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, [local1]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useMemo(() =&gt; {
    console.log(local1);
  }, [local1, local2]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useMemo(() =&gt; {
    console.log(local1);
  }, [local1, local2]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = {};
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1]);
  }
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = {};
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local, local]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local, local]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  useCallback(() =&gt; {}, [window]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  useCallback(() =&gt; {}, [window]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let local = props.foo;
  useCallback(() =&gt; {}, [local]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let local = props.foo;
  useCallback(() =&gt; {}, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history.foo.bar[2].dobedo.listen(),
      history.foo.bar().dobedo.listen[2]
    ];
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history.foo.bar[2].dobedo.listen(),
      history.foo.bar().dobedo.listen[2]
    ];
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history?.foo
    ];
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history?.foo
    ];
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  useEffect(() =&gt; {}, [&apos;foo&apos;]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  useEffect(() =&gt; {}, [&apos;foo&apos;]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [&apos;foo&apos;, &apos;bar&apos;]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [&apos;foo&apos;, &apos;bar&apos;]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [42, false, null]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [42, false, null]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const dependencies = [];
  useEffect(() =&gt; {}, dependencies);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const dependencies = [];
  useEffect(() =&gt; {}, dependencies);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, dependencies);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, dependencies);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, [...dependencies]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, [...dependencies]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local, ...dependencies]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local, ...dependencies]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [computeCacheKey(local)]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [computeCacheKey(local)]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items[0]]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items, props.items[0]]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items, props.items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items[0]]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items, items[0]]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items, items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {id: 42};
  useEffect(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {id: 42};
  useEffect(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id, local]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id, local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let color = {}
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let color = {}
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz, props.foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz, props.foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(props.foo.fizz.bizz);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(props.foo.fizz.bizz);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo.bar.baz]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props);
    console.log(props.hello);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props);
    console.log(props.hello);
  }, [props.foo.bar.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [local, local]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [local, local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {
    const local1 = {};
    console.log(local1);
  }, [local1]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {
    const local1 = {};
    console.log(local1);
  }, [local1]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {}, [local1]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {}, [local1]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [c, a, g]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [c, a, g]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [a, c, g]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [a, c, g]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.notReactiveHook(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.notReactiveHook(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a ? local : b]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a ? local : b]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a &amp;&amp; local]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a &amp;&amp; local]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props?.attribute.method()]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props?.attribute.method()]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props.method()]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props.method()]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, [ref]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, [ref]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1?.current?.focus();
    console.log(ref2?.current?.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1?.current?.focus();
    console.log(ref2?.current?.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent({ activeTab }) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.scrollTop = 0;
    ref2.current.scrollTop = 0;
  }, [ref1.current, ref2.current, activeTab]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent({ activeTab }) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.scrollTop = 0;
    ref2.current.scrollTop = 0;
  }, [ref1.current, ref2.current, activeTab]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent({ activeTab, initY }) {
  const ref1 = useRef();
  const ref2 = useRef();
  const fn = useCallback(() =&gt; {
    ref1.current.scrollTop = initY;
    ref2.current.scrollTop = initY;
  }, [ref1.current, ref2.current, activeTab, initY]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent({ activeTab, initY }) {
  const ref1 = useRef();
  const ref2 = useRef();
  const fn = useCallback(() =&gt; {
    ref1.current.scrollTop = initY;
    ref2.current.scrollTop = initY;
  }, [ref1.current, ref2.current, activeTab, initY]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current, ref]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current, ref]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [])
});
" name="react-hooks parser: babel-eslint invalid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [])
});
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.onChange) {
      props.onChange();
    }
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.onChange) {
      props.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props?.onChange) {
      props?.onChange();
    }
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props?.onChange) {
      props?.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    function play() {
      props.onPlay();
    }
    function pause() {
      props.onPause();
    }
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    function play() {
      props.onPlay();
    }
    function pause() {
      props.onPause();
    }
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, [skillsCount, props.isEditMode, props.toggleEditMode]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, [skillsCount, props.isEditMode, props.toggleEditMode]);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    externalCall(props);
    props.onChange();
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    externalCall(props);
    props.onChange();
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    externalCall(props);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    externalCall(props);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let value4;
  let asyncValue;
  useEffect(() =&gt; {
    if (value4) {
      value = {};
    }
    value2 = 100;
    value = 43;
    value4 = true;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let value4;
  let asyncValue;
  useEffect(() =&gt; {
    if (value4) {
      value = {};
    }
    value2 = 100;
    value = 43;
    value4 = true;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let asyncValue;
  useEffect(() =&gt; {
    value = {};
    value2 = 100;
    value = 43;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, [value, value2, value3]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let asyncValue;
  useEffect(() =&gt; {
    value = {};
    value2 = 100;
    value = 43;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, [value, value2, value3]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef?.current?.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef?.current?.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef?.current?.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef?.current?.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  });
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  });
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
}
" name="react-hooks parser: babel-eslint invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" name="react-hooks parser: babel-eslint invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function useMyThing(myRef, active) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    if (active) {
      myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
      return function() {
        setTimeout(() =&gt; {
          myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
        });
      }
    }
  }, [myRef, active]);
}
" name="react-hooks parser: babel-eslint invalid 
function useMyThing(myRef, active) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    if (active) {
      myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
      return function() {
        setTimeout(() =&gt; {
          myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
        });
      }
    }
  }, [myRef, active]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
        function MyComponent() {
          const myRef = useRef();
          useLayoutEffect_SAFE_FOR_SSR(() =&gt; {
            const handleMove = () =&gt; {};
            myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
            return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
          });
          return &lt;div ref={myRef} /&gt;;
        }
      " name="react-hooks parser: babel-eslint invalid 
        function MyComponent() {
          const myRef = useRef();
          useLayoutEffect_SAFE_FOR_SSR(() =&gt; {
            const handleMove = () =&gt; {};
            myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
            return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
          });
          return &lt;div ref={myRef} /&gt;;
        }
      " time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  const local4 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
    console.log(local4);
  }, [local1, local3]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  const local4 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
    console.log(local4);
  }, [local1, local3]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [window]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [window]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
import MutableStore from &apos;store&apos;;

function MyComponent() {
  useEffect(() =&gt; {
    console.log(MutableStore.hello);
  }, [MutableStore.hello]);
}
" name="react-hooks parser: babel-eslint invalid 
import MutableStore from &apos;store&apos;;

function MyComponent() {
  useEffect(() =&gt; {
    console.log(MutableStore.hello);
  }, [MutableStore.hello]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: babel-eslint invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: babel-eslint invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: babel-eslint invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);
  }
}
" name="react-hooks parser: babel-eslint invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    setTimeout(() =&gt; console.log(taint));
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    setTimeout(() =&gt; console.log(taint));
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  function handleChange() {}

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  function handleChange() {}

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  const handleChange = () =&gt; {};

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  const handleChange = () =&gt; {};

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.01">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let [, setState] = useState();

  function handleNext(value) {
    setState(value);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let [, setState] = useState();

  function handleNext(value) {
    setState(value);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);

  return &lt;div onClick={handleNext} /&gt;;
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);

  return &lt;div onClick={handleNext} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, [handleNext2]);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, [handleNext3]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, [handleNext2]);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, [handleNext3]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
  return (
    &lt;div
      onClick={() =&gt; {
        handleNext1();
        setTimeout(handleNext2);
        setTimeout(() =&gt; {
          handleNext3();
        });
      }}
    /&gt;
  );
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
  return (
    &lt;div
      onClick={() =&gt; {
        handleNext1();
        setTimeout(handleNext2);
        setTimeout(() =&gt; {
          handleNext3();
        });
      }}
    /&gt;
  );
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const handleNext1 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  function handleNext2() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  const handleNext1 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  function handleNext2() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let handleNext = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  if (props.foo) {
    handleNext = () =&gt; {
      console.log(&apos;hello&apos;);
    };
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let handleNext = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  if (props.foo) {
    handleNext = () =&gt; {
      console.log(&apos;hello&apos;);
    };
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let taint = props.foo;

  function handleNext(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let taint = props.foo;

  function handleNext(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint invalid 
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let increment = useCustomHook();

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let increment = useCustomHook();

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [increment]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [increment]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Counter({ increment }) {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint invalid 
function Counter({ increment }) {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(count + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: babel-eslint invalid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(count + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Podcasts() {
  useEffect(() =&gt; {
    alert(podcasts);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" name="react-hooks parser: babel-eslint invalid 
function Podcasts() {
  useEffect(() =&gt; {
    alert(podcasts);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: babel-eslint invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Podcasts({ api: { fetchPodcasts }, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: babel-eslint invalid 
function Podcasts({ api: { fetchPodcasts }, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(id);
      fetchPodcasts(id).then(setPodcasts);
      fetchPodcasts2(id).then(setPodcasts);
    });
  }, [id]);
}
" name="react-hooks parser: babel-eslint invalid 
function Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(id);
      fetchPodcasts(id).then(setPodcasts);
      fetchPodcasts2(id).then(setPodcasts);
    });
  }, [id]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: babel-eslint invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts?.(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: babel-eslint invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts?.(id).then(setPodcasts);
  }, [id]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Thing() {
  useEffect(() =&gt; {
    const fetchData = async () =&gt; {};
    fetchData();
  }, [fetchData]);
}
" name="react-hooks parser: babel-eslint invalid 
function Thing() {
  useEffect(() =&gt; {
    const fetchData = async () =&gt; {};
    fetchData();
  }, [fetchData]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    setState({});
  });
}
" name="react-hooks parser: babel-eslint invalid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    setState({});
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Hello() {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData.then(setData);
  });
}
" name="react-hooks parser: babel-eslint invalid 
function Hello() {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData.then(setData);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Hello({ country }) {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData(country).then(setData);
  });
}
" name="react-hooks parser: babel-eslint invalid 
function Hello({ country }) {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData(country).then(setData);
  });
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Hello({ prop1, prop2 }) {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    if (prop1) {
      setState(prop2);
    }
  });
}
" name="react-hooks parser: babel-eslint invalid 
function Hello({ prop1, prop2 }) {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    if (prop1) {
      setState(prop2);
    }
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Thing() {
  useEffect(async () =&gt; {}, []);
}
" name="react-hooks parser: babel-eslint invalid 
function Thing() {
  useEffect(async () =&gt; {}, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Thing() {
  useEffect(async () =&gt; {});
}
" name="react-hooks parser: babel-eslint invalid 
function Thing() {
  useEffect(async () =&gt; {});
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    prop.hello(foo);
  }, [foo]);
  const bar = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    prop.hello(foo);
  }, [foo]);
  const bar = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  const myEffect = function() {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  const myEffect = function() {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    otherThing();
  };
  const otherThing = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    otherThing();
  };
  const otherThing = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [local]);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent({myEffect}) {
  useEffect(myEffect, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent({myEffect}) {
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(debounce(() =&gt; {
    console.log(local);
  }, delay), []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(debounce(() =&gt; {
    console.log(local);
  }, delay), []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
    props.foo.bar.baz = 1;
  }, []);
}
" name="react-hooks parser: babel-eslint invalid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
    props.foo.bar.baz = 1;
  }, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = [];
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = [];
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = () =&gt; {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = () =&gt; {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = function bar(){};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = function bar(){};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = class {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = class {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = true ? {} : &quot;fine&quot;;
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = true ? {} : &quot;fine&quot;;
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = bar || {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = bar || {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = bar ?? {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = bar ?? {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = bar &amp;&amp; {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = bar &amp;&amp; {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = bar ? baz ? {} : null : null;
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = bar ? baz ? {} : null : null;
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  let foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  let foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  var foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  var foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = {};
  useCallback(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = {};
  useCallback(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = {};
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = {};
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = {};
  useImperativeHandle(
    ref,
    () =&gt; {
       console.log(foo);
    },
    [foo]
  );
}
" name="react-hooks parser: babel-eslint invalid 
function Component() {
  const foo = {};
  useImperativeHandle(
    ref,
    () =&gt; {
       console.log(foo);
    },
    [foo]
  );
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Foo(section) {
  const foo = section.section_components?.edges ?? [];
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Foo(section) {
  const foo = section.section_components?.edges ?? [];
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Foo(section) {
  const foo = {};
  console.log(foo);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Foo(section) {
  const foo = {};
  console.log(foo);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = &lt;&gt;Hi!&lt;/&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = &lt;&gt;Hi!&lt;/&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = &lt;div&gt;Hi!&lt;/div&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = &lt;div&gt;Hi!&lt;/div&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = bar = {};
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = bar = {};
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = new String(&apos;foo&apos;); // Note &apos;foo&apos; will be boxed, and thus an object and thus compared by reference.
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = new String(&apos;foo&apos;); // Note &apos;foo&apos; will be boxed, and thus an object and thus compared by reference.
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.01">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = new Map([]);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = new Map([]);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = /reg/;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = /reg/;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Foo() {
  class Bar {};
  useMemo(() =&gt; {
    console.log(new Bar());
  }, [Bar]);
}
" name="react-hooks parser: babel-eslint invalid 
function Foo() {
  class Bar {};
  useMemo(() =&gt; {
    console.log(new Bar());
  }, [Bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: babel-eslint invalid 
function Foo() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Example({ prop }) {
  const bar = useEffect(&lt;T&gt;(a: T): Hello =&gt; {
    prop();
  }, [prop]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Example({ prop }) {
  const bar = useEffect(&lt;T&gt;(a: T): Hello =&gt; {
    prop();
  }, [prop]);
}
" time="0.736">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  });
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  });
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  useEffect(() =&gt; {
    const local = {};
    console.log(local);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  useEffect(() =&gt; {
    const local = {};
    console.log(local);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local1 = {};
  {
    const local2 = {};
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    });
  }
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local1 = {};
  {
    const local2 = {};
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    });
  }
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1, local2]);
  }
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1, local2]);
  }
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local2]);
  }
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local2]);
  }
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(unresolved);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(unresolved);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [,,,local,,,]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [,,,local,,,]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
  }, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
    console.log(foo.slice(0));
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
    console.log(foo.slice(0));
  }, [foo]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, [history]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, [history]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {});
  useLayoutEffect(() =&gt; {});
  useImperativeHandle(props.innerRef, () =&gt; {});
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {});
  useLayoutEffect(() =&gt; {});
  useImperativeHandle(props.innerRef, () =&gt; {});
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.bar, props.foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.bar, props.foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.foo, props.bar]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.foo, props.bar]);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props.foo, props.bar, local]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props.foo, props.bar, local]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);

  let color = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz, color]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);

  let color = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz, color]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar?.baz ?? null);
  }, [props.foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar?.baz ?? null);
  }, [props.foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo?.bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.foo?.bar);
  }, [props.foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.foo?.bar);
  }, [props.foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useMemo(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useMemo(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar?.toString());
  }, [props.foo.bar]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar?.toString());
  }, [props.foo.bar]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.toString());
  }, [props.foo.bar]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.toString());
  }, [props.foo.bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar.toString());
  }, [props?.foo?.bar]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar.toString());
  }, [props?.foo?.bar]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, [props?.foo.bar?.baz]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, [props?.foo.bar?.baz]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const myEffect = () =&gt; {
    // Doesn&apos;t use anything
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const myEffect = () =&gt; {
    // Doesn&apos;t use anything
  };
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
const local = {};
function MyComponent() {
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
const local = {};
function MyComponent() {
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local = someFunc();
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, [local]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local = someFunc();
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, [local]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  function myEffect() {
    console.log(global);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  function myEffect() {
    console.log(global);
  }
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    otherThing()
  }
  const otherThing = () =&gt; {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    otherThing()
  }
  const otherThing = () =&gt; {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({delay}) {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [myEffect]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({delay}) {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [myEffect]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect,,]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect,,]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
let local = {};
function myEffect() {
  console.log(local);
}
function MyComponent() {
  useEffect(myEffect, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
let local = {};
function myEffect() {
  console.log(local);
}
function MyComponent() {
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [myEffect]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [myEffect]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({myEffect}) {
  useEffect(myEffect);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({myEffect}) {
  useEffect(myEffect);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  });
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  });
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useWithoutEffectSuffix(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useWithoutEffectSuffix(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  return renderHelperConfusedWithEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  return renderHelperConfusedWithEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
const local = {};
useEffect(() =&gt; {
  console.log(local);
}, []);
" name="react-hooks parser: @babel/eslint-parser valid 
const local = {};
useEffect(() =&gt; {
  console.log(local);
}, []);
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
const local1 = {};
{
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
const local1 = {};
{
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({ maybeRef2, foo }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();
  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();
  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();
  const [isPending1] = useTransition();
  const [isPending2, startTransition2] = useTransition();
  const [isPending3] = React.useTransition();
  const [isPending4, startTransition4] = React.useTransition();
  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();
    startTransition1();
    startTransition2();
    startTransition3();
    startTransition4();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    console.log(isPending2);
    console.log(isPending4);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,
    isPending2, isPending4,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch

    // In this test, we don&apos;t specify static deps.
    // That should be okay.
  ]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({ maybeRef2, foo }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();
  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();
  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();
  const [isPending1] = useTransition();
  const [isPending2, startTransition2] = useTransition();
  const [isPending3] = React.useTransition();
  const [isPending4, startTransition4] = React.useTransition();
  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();
    startTransition1();
    startTransition2();
    startTransition3();
    startTransition4();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    console.log(isPending2);
    console.log(isPending4);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,
    isPending2, isPending4,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch

    // In this test, we don&apos;t specify static deps.
    // That should be okay.
  ]);
}
" time="0.019">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({ maybeRef2 }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();

  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();

  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();

  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch,

    // In this test, we specify static deps.
    // That should be okay too!
    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2
  ]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({ maybeRef2 }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();

  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();

  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();

  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch,

    // In this test, we specify static deps.
    // That should be okay too!
    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2
  ]);
}
" time="0.013">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }))
});
" name="react-hooks parser: @babel/eslint-parser valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }))
});
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [props.hello])
});
" name="react-hooks parser: @babel/eslint-parser valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [props.hello])
});
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  let obj = someFunc();
  useEffect(() =&gt; {
    obj.foo = true;
  }, [obj]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  let obj = someFunc();
  useEffect(() =&gt; {
    obj.foo = true;
  }, [obj]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
  }, [foo.bar]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
  }, [foo.bar]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef?.current?.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef?.current?.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, [myRef]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, [myRef]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @babel/eslint-parser valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function useMyThing(myRef) {
  useCallback(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function useMyThing(myRef) {
  useCallback(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      console.log(myRef.current)
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @babel/eslint-parser valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      console.log(myRef.current)
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; {};
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @babel/eslint-parser valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; {};
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, [local1, local2, local3]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, [local1, local2, local3]);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  const local = props.local;
  useEffect(() =&gt; {}, [local]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  const local = props.local;
  useEffect(() =&gt; {}, [local]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Foo({ activeTab }) {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [activeTab]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Foo({ activeTab }) {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [activeTab]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  const fn2 = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  const fn3 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  const fn4 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  const fn2 = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  const fn3 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  const fn4 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  function handleNext() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  function handleNext() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();

  function handleNext1(value) {
    let value2 = value * 100;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(foo(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(value);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();

  function handleNext1(value) {
    let value2 = value * 100;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(foo(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(value);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.009">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function useInterval(callback, delay) {
  const savedCallback = useRef();
  useEffect(() =&gt; {
    savedCallback.current = callback;
  });
  useEffect(() =&gt; {
    function tick() {
      savedCallback.current();
    }
    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () =&gt; clearInterval(id);
    }
  }, [delay]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function useInterval(callback, delay) {
  const savedCallback = useRef();
  useEffect(() =&gt; {
    savedCallback.current = callback;
  });
  useEffect(() =&gt; {
    function tick() {
      savedCallback.current();
    }
    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () =&gt; clearInterval(id);
    }
  }, [delay]);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [setCount]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [setCount]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(c =&gt; c + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(c =&gt; c + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      dispatch(&apos;inc&apos;);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      dispatch(&apos;inc&apos;);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  const tick = () =&gt; {
    dispatch(&apos;inc&apos;);
  };

  useEffect(() =&gt; {
    let id = setInterval(tick, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  const tick = () =&gt; {
    dispatch(&apos;inc&apos;);
  };

  useEffect(() =&gt; {
    let id = setInterval(tick, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Podcasts() {
  useEffect(() =&gt; {
    setPodcasts([]);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Podcasts() {
  useEffect(() =&gt; {
    setPodcasts([]);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function withFetch(fetchPodcasts) {
  return function Podcasts({ id }) {
    let [podcasts, setPodcasts] = useState(null);
    useEffect(() =&gt; {
      fetchPodcasts(id).then(setPodcasts);
    }, [id]);
  }
}
" name="react-hooks parser: @babel/eslint-parser valid 
function withFetch(fetchPodcasts) {
  return function Podcasts({ id }) {
    let [podcasts, setPodcasts] = useState(null);
    useEffect(() =&gt; {
      fetchPodcasts(id).then(setPodcasts);
    }, [id]);
  }
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Podcasts({ id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    function doFetch({ fetchPodcasts }) {
      fetchPodcasts(id).then(setPodcasts);
    }
    doFetch({ fetchPodcasts: API.fetchPodcasts });
  }, [id]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Podcasts({ id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    function doFetch({ fetchPodcasts }) {
      fetchPodcasts(id).then(setPodcasts);
    }
    doFetch({ fetchPodcasts: API.fetchPodcasts });
  }, [id]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
import increment from &apos;./increment&apos;;
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser valid 
import increment from &apos;./increment&apos;;
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function withStuff(increment) {
  return function Counter() {
    let [count, setCount] = useState(0);

    useEffect(() =&gt; {
      let id = setInterval(() =&gt; {
        setCount(count =&gt; count + increment);
      }, 1000);
      return () =&gt; clearInterval(id);
    }, []);

    return &lt;h1&gt;{count}&lt;/h1&gt;;
  }
}
" name="react-hooks parser: @babel/eslint-parser valid 
function withStuff(increment) {
  return function Counter() {
    let [count, setCount] = useState(0);

    useEffect(() =&gt; {
      let id = setInterval(() =&gt; {
        setCount(count =&gt; count + increment);
      }, 1000);
      return () =&gt; clearInterval(id);
    }, []);

    return &lt;h1&gt;{count}&lt;/h1&gt;;
  }
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function App() {
  const [query, setQuery] = useState(&apos;react&apos;);
  const [state, setState] = useState(null);
  useEffect(() =&gt; {
    let ignore = false;
    fetchSomething();
    async function fetchSomething() {
      const result = await (await fetch(&apos;http://hn.algolia.com/api/v1/search?query=&apos; + query)).json();
      if (!ignore) setState(result);
    }
    return () =&gt; { ignore = true; };
  }, [query]);
  return (
    &lt;&gt;
      &lt;input value={query} onChange={e =&gt; setQuery(e.target.value)} /&gt;
      {JSON.stringify(state)}
    &lt;/&gt;
  );
}
" name="react-hooks parser: @babel/eslint-parser valid 
function App() {
  const [query, setQuery] = useState(&apos;react&apos;);
  const [state, setState] = useState(null);
  useEffect(() =&gt; {
    let ignore = false;
    fetchSomething();
    async function fetchSomething() {
      const result = await (await fetch(&apos;http://hn.algolia.com/api/v1/search?query=&apos; + query)).json();
      if (!ignore) setState(result);
    }
    return () =&gt; { ignore = true; };
  }, [query]);
  return (
    &lt;&gt;
      &lt;input value={query} onChange={e =&gt; setQuery(e.target.value)} /&gt;
      {JSON.stringify(state)}
    &lt;/&gt;
  );
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    if (prop) {
      foo();
    }
  }, [prop]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    if (prop) {
      foo();
    }
  }, [prop]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    const handleResize = () =&gt; setState(window.innerWidth);
    window.addEventListener(&apos;resize&apos;, handleResize);
    return () =&gt; window.removeEventListener(&apos;resize&apos;, handleResize);
  });
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    const handleResize = () =&gt; setState(window.innerWidth);
    window.addEventListener(&apos;resize&apos;, handleResize);
    return () =&gt; window.removeEventListener(&apos;resize&apos;, handleResize);
  });
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Example() {
  useEffect(() =&gt; {
    arguments
  }, [])
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Example() {
  useEffect(() =&gt; {
    arguments
  }, [])
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Example() {
  useEffect(() =&gt; {
    const bar = () =&gt; {
      arguments;
    };
    bar();
  }, [])
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Example() {
  useEffect(() =&gt; {
    const bar = () =&gt; {
      arguments;
    };
    bar();
  }, [])
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, [props.upperViewHeight]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, [props.upperViewHeight]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props?.upperViewHeight]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props?.upperViewHeight]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function useFoo(foo){
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function useFoo(foo){
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function useFoo(){
  const foo = &quot;hi!&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function useFoo(){
  const foo = &quot;hi!&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function useFoo(){
  let {foo} = {foo: 1};
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function useFoo(){
  let {foo} = {foo: 1};
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function useFoo(){
  let [foo] = [1];
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function useFoo(){
  let [foo] = [1];
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function useFoo() {
  const foo = &quot;fine&quot;;
  if (true) {
    // Shadowed variable with constant construction in a nested scope is fine.
    const foo = {};
  }
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function useFoo() {
  const foo = &quot;fine&quot;;
  if (true) {
    // Shadowed variable with constant construction in a nested scope is fine.
    const foo = {};
  }
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({foo}) {
  return useMemo(() =&gt; foo, [foo])
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent({foo}) {
  return useMemo(() =&gt; foo, [foo])
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const foo = true ? &quot;fine&quot; : &quot;also fine&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser valid 
function MyComponent() {
  const foo = true ? &quot;fine&quot; : &quot;also fine&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = ({}: any);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = ({}: any);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.baz);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.baz);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, []);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.toString());
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.toString());
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  let local = 42;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  let local = 42;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = /foo/;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = /foo/;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const value = useMemo(() =&gt; { return 2*2; });
  const fn = useCallback(() =&gt; { alert(&apos;foo&apos;); });
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const value = useMemo(() =&gt; { return 2*2; });
  const fn = useCallback(() =&gt; { alert(&apos;foo&apos;); });
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ fn1, fn2 }) {
  const value = useMemo(fn1);
  const fn = useCallback(fn2);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ fn1, fn2 }) {
  const value = useMemo(fn1);
  const fn = useCallback(fn2);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  useEffect()
  useLayoutEffect()
  useCallback()
  useMemo()
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  useEffect()
  useLayoutEffect()
  useCallback()
  useMemo()
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    if (true) {
      console.log(local);
    }
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    if (true) {
      console.log(local);
    }
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    try {
      console.log(local);
    } finally {}
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    try {
      console.log(local);
    } finally {}
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    function inner() {
      console.log(local);
    }
    inner();
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    function inner() {
      console.log(local);
    }
    inner();
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, []);
  }
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, []);
  }
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, [local1]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, [local1]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useMemo(() =&gt; {
    console.log(local1);
  }, [local1, local2]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useMemo(() =&gt; {
    console.log(local1);
  }, [local1, local2]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = {};
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1]);
  }
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = {};
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1]);
  }
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local, local]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local, local]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  useCallback(() =&gt; {}, [window]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  useCallback(() =&gt; {}, [window]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let local = props.foo;
  useCallback(() =&gt; {}, [local]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let local = props.foo;
  useCallback(() =&gt; {}, [local]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history.foo.bar[2].dobedo.listen(),
      history.foo.bar().dobedo.listen[2]
    ];
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history.foo.bar[2].dobedo.listen(),
      history.foo.bar().dobedo.listen[2]
    ];
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history?.foo
    ];
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history?.foo
    ];
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  useEffect(() =&gt; {}, [&apos;foo&apos;]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  useEffect(() =&gt; {}, [&apos;foo&apos;]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [&apos;foo&apos;, &apos;bar&apos;]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [&apos;foo&apos;, &apos;bar&apos;]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [42, false, null]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [42, false, null]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const dependencies = [];
  useEffect(() =&gt; {}, dependencies);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const dependencies = [];
  useEffect(() =&gt; {}, dependencies);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, dependencies);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, dependencies);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, [...dependencies]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, [...dependencies]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local, ...dependencies]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local, ...dependencies]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [computeCacheKey(local)]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [computeCacheKey(local)]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items[0]]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items[0]]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items, props.items[0]]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items, props.items[0]]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items[0]]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items[0]]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items, items[0]]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items, items[0]]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {id: 42};
  useEffect(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {id: 42};
  useEffect(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id, local]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id, local]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let color = {}
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let color = {}
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz, props.foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz, props.foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(props.foo.fizz.bizz);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(props.foo.fizz.bizz);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo.bar.baz]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props);
    console.log(props.hello);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props);
    console.log(props.hello);
  }, [props.foo.bar.baz]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [local, local]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [local, local]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {
    const local1 = {};
    console.log(local1);
  }, [local1]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {
    const local1 = {};
    console.log(local1);
  }, [local1]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {}, [local1]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {}, [local1]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [c, a, g]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [c, a, g]);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [a, c, g]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [a, c, g]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.notReactiveHook(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.notReactiveHook(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a ? local : b]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a ? local : b]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a &amp;&amp; local]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a &amp;&amp; local]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props?.attribute.method()]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props?.attribute.method()]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props.method()]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props.method()]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, [ref]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, [ref]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1?.current?.focus();
    console.log(ref2?.current?.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1?.current?.focus();
    console.log(ref2?.current?.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ activeTab }) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.scrollTop = 0;
    ref2.current.scrollTop = 0;
  }, [ref1.current, ref2.current, activeTab]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ activeTab }) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.scrollTop = 0;
    ref2.current.scrollTop = 0;
  }, [ref1.current, ref2.current, activeTab]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ activeTab, initY }) {
  const ref1 = useRef();
  const ref2 = useRef();
  const fn = useCallback(() =&gt; {
    ref1.current.scrollTop = initY;
    ref2.current.scrollTop = initY;
  }, [ref1.current, ref2.current, activeTab, initY]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({ activeTab, initY }) {
  const ref1 = useRef();
  const ref2 = useRef();
  const fn = useCallback(() =&gt; {
    ref1.current.scrollTop = initY;
    ref2.current.scrollTop = initY;
  }, [ref1.current, ref2.current, activeTab, initY]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current, ref]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current, ref]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [])
});
" name="react-hooks parser: @babel/eslint-parser invalid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [])
});
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.onChange) {
      props.onChange();
    }
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.onChange) {
      props.onChange();
    }
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props?.onChange) {
      props?.onChange();
    }
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props?.onChange) {
      props?.onChange();
    }
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    function play() {
      props.onPlay();
    }
    function pause() {
      props.onPause();
    }
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    function play() {
      props.onPlay();
    }
    function pause() {
      props.onPause();
    }
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, [skillsCount, props.isEditMode, props.toggleEditMode]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, [skillsCount, props.isEditMode, props.toggleEditMode]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    externalCall(props);
    props.onChange();
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    externalCall(props);
    props.onChange();
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    externalCall(props);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    externalCall(props);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let value4;
  let asyncValue;
  useEffect(() =&gt; {
    if (value4) {
      value = {};
    }
    value2 = 100;
    value = 43;
    value4 = true;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let value4;
  let asyncValue;
  useEffect(() =&gt; {
    if (value4) {
      value = {};
    }
    value2 = 100;
    value = 43;
    value4 = true;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let asyncValue;
  useEffect(() =&gt; {
    value = {};
    value2 = 100;
    value = 43;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, [value, value2, value3]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let asyncValue;
  useEffect(() =&gt; {
    value = {};
    value2 = 100;
    value = 43;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, [value, value2, value3]);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef?.current?.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef?.current?.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef?.current?.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef?.current?.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  });
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  });
  return &lt;div ref={myRef} /&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function useMyThing(myRef, active) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    if (active) {
      myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
      return function() {
        setTimeout(() =&gt; {
          myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
        });
      }
    }
  }, [myRef, active]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function useMyThing(myRef, active) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    if (active) {
      myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
      return function() {
        setTimeout(() =&gt; {
          myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
        });
      }
    }
  }, [myRef, active]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
        function MyComponent() {
          const myRef = useRef();
          useLayoutEffect_SAFE_FOR_SSR(() =&gt; {
            const handleMove = () =&gt; {};
            myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
            return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
          });
          return &lt;div ref={myRef} /&gt;;
        }
      " name="react-hooks parser: @babel/eslint-parser invalid 
        function MyComponent() {
          const myRef = useRef();
          useLayoutEffect_SAFE_FOR_SSR(() =&gt; {
            const handleMove = () =&gt; {};
            myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
            return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
          });
          return &lt;div ref={myRef} /&gt;;
        }
      " time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  const local4 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
    console.log(local4);
  }, [local1, local3]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  const local4 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
    console.log(local4);
  }, [local1, local3]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [window]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [window]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
import MutableStore from &apos;store&apos;;

function MyComponent() {
  useEffect(() =&gt; {
    console.log(MutableStore.hello);
  }, [MutableStore.hello]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
import MutableStore from &apos;store&apos;;

function MyComponent() {
  useEffect(() =&gt; {
    console.log(MutableStore.hello);
  }, [MutableStore.hello]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @babel/eslint-parser invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @babel/eslint-parser invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @babel/eslint-parser invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);
  }
}
" name="react-hooks parser: @babel/eslint-parser invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);
  }
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    setTimeout(() =&gt; console.log(taint));
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    setTimeout(() =&gt; console.log(taint));
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  function handleChange() {}

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  function handleChange() {}

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.011">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  const handleChange = () =&gt; {};

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  const handleChange = () =&gt; {};

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let [, setState] = useState();

  function handleNext(value) {
    setState(value);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let [, setState] = useState();

  function handleNext(value) {
    setState(value);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);

  return &lt;div onClick={handleNext} /&gt;;
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);

  return &lt;div onClick={handleNext} /&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, [handleNext2]);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, [handleNext3]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, [handleNext2]);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, [handleNext3]);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
  return (
    &lt;div
      onClick={() =&gt; {
        handleNext1();
        setTimeout(handleNext2);
        setTimeout(() =&gt; {
          handleNext3();
        });
      }}
    /&gt;
  );
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
  return (
    &lt;div
      onClick={() =&gt; {
        handleNext1();
        setTimeout(handleNext2);
        setTimeout(() =&gt; {
          handleNext3();
        });
      }}
    /&gt;
  );
}
" time="0.011">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const handleNext1 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  function handleNext2() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  const handleNext1 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  function handleNext2() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let handleNext = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  if (props.foo) {
    handleNext = () =&gt; {
      console.log(&apos;hello&apos;);
    };
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let handleNext = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  if (props.foo) {
    handleNext = () =&gt; {
      console.log(&apos;hello&apos;);
    };
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let taint = props.foo;

  function handleNext(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let taint = props.foo;

  function handleNext(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let increment = useCustomHook();

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let increment = useCustomHook();

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [increment]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [increment]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Counter({ increment }) {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Counter({ increment }) {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(count + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(count + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Podcasts() {
  useEffect(() =&gt; {
    alert(podcasts);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Podcasts() {
  useEffect(() =&gt; {
    alert(podcasts);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Podcasts({ api: { fetchPodcasts }, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Podcasts({ api: { fetchPodcasts }, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(id);
      fetchPodcasts(id).then(setPodcasts);
      fetchPodcasts2(id).then(setPodcasts);
    });
  }, [id]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(id);
      fetchPodcasts(id).then(setPodcasts);
      fetchPodcasts2(id).then(setPodcasts);
    });
  }, [id]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts?.(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts?.(id).then(setPodcasts);
  }, [id]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Thing() {
  useEffect(() =&gt; {
    const fetchData = async () =&gt; {};
    fetchData();
  }, [fetchData]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Thing() {
  useEffect(() =&gt; {
    const fetchData = async () =&gt; {};
    fetchData();
  }, [fetchData]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    setState({});
  });
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    setState({});
  });
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Hello() {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData.then(setData);
  });
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Hello() {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData.then(setData);
  });
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Hello({ country }) {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData(country).then(setData);
  });
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Hello({ country }) {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData(country).then(setData);
  });
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Hello({ prop1, prop2 }) {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    if (prop1) {
      setState(prop2);
    }
  });
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Hello({ prop1, prop2 }) {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    if (prop1) {
      setState(prop2);
    }
  });
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Thing() {
  useEffect(async () =&gt; {}, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Thing() {
  useEffect(async () =&gt; {}, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Thing() {
  useEffect(async () =&gt; {});
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Thing() {
  useEffect(async () =&gt; {});
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    prop.hello(foo);
  }, [foo]);
  const bar = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    prop.hello(foo);
  }, [foo]);
  const bar = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  const myEffect = function() {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  const myEffect = function() {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    otherThing();
  };
  const otherThing = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    otherThing();
  };
  const otherThing = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [local]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [local]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({myEffect}) {
  useEffect(myEffect, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent({myEffect}) {
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(debounce(() =&gt; {
    console.log(local);
  }, delay), []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(debounce(() =&gt; {
    console.log(local);
  }, delay), []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
    props.foo.bar.baz = 1;
  }, []);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
    props.foo.bar.baz = 1;
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = [];
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = [];
  useMemo(() =&gt; foo, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = () =&gt; {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = () =&gt; {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = function bar(){};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = function bar(){};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = class {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = class {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = true ? {} : &quot;fine&quot;;
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = true ? {} : &quot;fine&quot;;
  useMemo(() =&gt; foo, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = bar || {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = bar || {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = bar ?? {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = bar ?? {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = bar &amp;&amp; {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = bar &amp;&amp; {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = bar ? baz ? {} : null : null;
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = bar ? baz ? {} : null : null;
  useMemo(() =&gt; foo, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  let foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  let foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  var foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  var foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = {};
  useCallback(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = {};
  useCallback(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = {};
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = {};
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = {};
  useImperativeHandle(
    ref,
    () =&gt; {
       console.log(foo);
    },
    [foo]
  );
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Component() {
  const foo = {};
  useImperativeHandle(
    ref,
    () =&gt; {
       console.log(foo);
    },
    [foo]
  );
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Foo(section) {
  const foo = section.section_components?.edges ?? [];
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Foo(section) {
  const foo = section.section_components?.edges ?? [];
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Foo(section) {
  const foo = {};
  console.log(foo);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Foo(section) {
  const foo = {};
  console.log(foo);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = &lt;&gt;Hi!&lt;/&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = &lt;&gt;Hi!&lt;/&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = &lt;div&gt;Hi!&lt;/div&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = &lt;div&gt;Hi!&lt;/div&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = bar = {};
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = bar = {};
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = new String(&apos;foo&apos;); // Note &apos;foo&apos; will be boxed, and thus an object and thus compared by reference.
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = new String(&apos;foo&apos;); // Note &apos;foo&apos; will be boxed, and thus an object and thus compared by reference.
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = new Map([]);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = new Map([]);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = /reg/;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = /reg/;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  class Bar {};
  useMemo(() =&gt; {
    console.log(new Bar());
  }, [Bar]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  class Bar {};
  useMemo(() =&gt; {
    console.log(new Bar());
  }, [Bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @babel/eslint-parser invalid 
function Foo() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const ref = useRef() as React.MutableRefObject&lt;HTMLDivElement&gt;;
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const ref = useRef() as React.MutableRefObject&lt;HTMLDivElement&gt;;
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" time="0.497">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber);
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber);
  }, [])
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function App() {
  const foo = {x: 1};
  React.useEffect(() =&gt; {
    const bar = {x: 2};
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function App() {
  const foo = {x: 1};
  React.useEffect(() =&gt; {
    const bar = {x: 2};
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  });
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    const local = {};
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    const local = {};
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local1 = {};
  {
    const local2 = {};
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    });
  }
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local1 = {};
  {
    const local2 = {};
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    });
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1, local2]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1, local2]);
  }
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local2]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local2]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(unresolved);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(unresolved);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [,,,local,,,]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [,,,local,,,]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
    console.log(foo.slice(0));
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
    console.log(foo.slice(0));
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, [history]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, [history]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {});
  useLayoutEffect(() =&gt; {});
  useImperativeHandle(props.innerRef, () =&gt; {});
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {});
  useLayoutEffect(() =&gt; {});
  useImperativeHandle(props.innerRef, () =&gt; {});
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.bar, props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.bar, props.foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.foo, props.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.foo, props.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props.foo, props.bar, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props.foo, props.bar, local]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);

  let color = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz, color]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);

  let color = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz, color]);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar?.baz ?? null);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar?.baz ?? null);
  }, [props.foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo?.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.foo?.bar);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.foo?.bar);
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useMemo(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useMemo(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar?.toString());
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar?.toString());
  }, [props.foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.toString());
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.toString());
  }, [props.foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar.toString());
  }, [props?.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar.toString());
  }, [props?.foo?.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, [props?.foo.bar?.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, [props?.foo.bar?.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const myEffect = () =&gt; {
    // Doesn&apos;t use anything
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const myEffect = () =&gt; {
    // Doesn&apos;t use anything
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
const local = {};
function MyComponent() {
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
const local = {};
function MyComponent() {
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local = someFunc();
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local = someFunc();
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, [local]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  function myEffect() {
    console.log(global);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  function myEffect() {
    console.log(global);
  }
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    otherThing()
  }
  const otherThing = () =&gt; {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    otherThing()
  }
  const otherThing = () =&gt; {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({delay}) {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [myEffect]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({delay}) {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [myEffect]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect,,]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect,,]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
let local = {};
function myEffect() {
  console.log(local);
}
function MyComponent() {
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
let local = {};
function myEffect() {
  console.log(local);
}
function MyComponent() {
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [myEffect]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [myEffect]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useWithoutEffectSuffix(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useWithoutEffectSuffix(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  return renderHelperConfusedWithEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  return renderHelperConfusedWithEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
const local = {};
useEffect(() =&gt; {
  console.log(local);
}, []);
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
const local = {};
useEffect(() =&gt; {
  console.log(local);
}, []);
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
const local1 = {};
{
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
const local1 = {};
{
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({ maybeRef2, foo }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();
  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();
  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();
  const [isPending1] = useTransition();
  const [isPending2, startTransition2] = useTransition();
  const [isPending3] = React.useTransition();
  const [isPending4, startTransition4] = React.useTransition();
  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();
    startTransition1();
    startTransition2();
    startTransition3();
    startTransition4();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    console.log(isPending2);
    console.log(isPending4);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,
    isPending2, isPending4,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch

    // In this test, we don&apos;t specify static deps.
    // That should be okay.
  ]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({ maybeRef2, foo }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();
  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();
  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();
  const [isPending1] = useTransition();
  const [isPending2, startTransition2] = useTransition();
  const [isPending3] = React.useTransition();
  const [isPending4, startTransition4] = React.useTransition();
  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();
    startTransition1();
    startTransition2();
    startTransition3();
    startTransition4();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    console.log(isPending2);
    console.log(isPending4);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,
    isPending2, isPending4,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch

    // In this test, we don&apos;t specify static deps.
    // That should be okay.
  ]);
}
" time="0.013">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({ maybeRef2 }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();

  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();

  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();

  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch,

    // In this test, we specify static deps.
    // That should be okay too!
    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2
  ]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({ maybeRef2 }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();

  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();

  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();

  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch,

    // In this test, we specify static deps.
    // That should be okay too!
    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2
  ]);
}
" time="0.013">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }))
});
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }))
});
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [props.hello])
});
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [props.hello])
});
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  let obj = someFunc();
  useEffect(() =&gt; {
    obj.foo = true;
  }, [obj]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  let obj = someFunc();
  useEffect(() =&gt; {
    obj.foo = true;
  }, [obj]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
  }, [foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
  }, [foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef?.current?.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef?.current?.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, [myRef]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useMyThing(myRef) {
  useCallback(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useMyThing(myRef) {
  useCallback(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      console.log(myRef.current)
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      console.log(myRef.current)
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; {};
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; {};
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, [local1, local2, local3]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, [local1, local2, local3]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  const local = props.local;
  useEffect(() =&gt; {}, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  const local = props.local;
  useEffect(() =&gt; {}, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Foo({ activeTab }) {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [activeTab]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Foo({ activeTab }) {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [activeTab]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" time="0.011">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  const fn2 = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  const fn3 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  const fn4 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  const fn2 = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  const fn3 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  const fn4 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  function handleNext() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  function handleNext() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();

  function handleNext1(value) {
    let value2 = value * 100;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(foo(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(value);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();

  function handleNext1(value) {
    let value2 = value * 100;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(foo(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(value);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useInterval(callback, delay) {
  const savedCallback = useRef();
  useEffect(() =&gt; {
    savedCallback.current = callback;
  });
  useEffect(() =&gt; {
    function tick() {
      savedCallback.current();
    }
    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () =&gt; clearInterval(id);
    }
  }, [delay]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useInterval(callback, delay) {
  const savedCallback = useRef();
  useEffect(() =&gt; {
    savedCallback.current = callback;
  });
  useEffect(() =&gt; {
    function tick() {
      savedCallback.current();
    }
    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () =&gt; clearInterval(id);
    }
  }, [delay]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [setCount]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [setCount]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(c =&gt; c + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(c =&gt; c + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      dispatch(&apos;inc&apos;);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      dispatch(&apos;inc&apos;);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  const tick = () =&gt; {
    dispatch(&apos;inc&apos;);
  };

  useEffect(() =&gt; {
    let id = setInterval(tick, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  const tick = () =&gt; {
    dispatch(&apos;inc&apos;);
  };

  useEffect(() =&gt; {
    let id = setInterval(tick, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Podcasts() {
  useEffect(() =&gt; {
    setPodcasts([]);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Podcasts() {
  useEffect(() =&gt; {
    setPodcasts([]);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function withFetch(fetchPodcasts) {
  return function Podcasts({ id }) {
    let [podcasts, setPodcasts] = useState(null);
    useEffect(() =&gt; {
      fetchPodcasts(id).then(setPodcasts);
    }, [id]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function withFetch(fetchPodcasts) {
  return function Podcasts({ id }) {
    let [podcasts, setPodcasts] = useState(null);
    useEffect(() =&gt; {
      fetchPodcasts(id).then(setPodcasts);
    }, [id]);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Podcasts({ id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    function doFetch({ fetchPodcasts }) {
      fetchPodcasts(id).then(setPodcasts);
    }
    doFetch({ fetchPodcasts: API.fetchPodcasts });
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Podcasts({ id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    function doFetch({ fetchPodcasts }) {
      fetchPodcasts(id).then(setPodcasts);
    }
    doFetch({ fetchPodcasts: API.fetchPodcasts });
  }, [id]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
import increment from &apos;./increment&apos;;
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
import increment from &apos;./increment&apos;;
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function withStuff(increment) {
  return function Counter() {
    let [count, setCount] = useState(0);

    useEffect(() =&gt; {
      let id = setInterval(() =&gt; {
        setCount(count =&gt; count + increment);
      }, 1000);
      return () =&gt; clearInterval(id);
    }, []);

    return &lt;h1&gt;{count}&lt;/h1&gt;;
  }
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function withStuff(increment) {
  return function Counter() {
    let [count, setCount] = useState(0);

    useEffect(() =&gt; {
      let id = setInterval(() =&gt; {
        setCount(count =&gt; count + increment);
      }, 1000);
      return () =&gt; clearInterval(id);
    }, []);

    return &lt;h1&gt;{count}&lt;/h1&gt;;
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function App() {
  const [query, setQuery] = useState(&apos;react&apos;);
  const [state, setState] = useState(null);
  useEffect(() =&gt; {
    let ignore = false;
    fetchSomething();
    async function fetchSomething() {
      const result = await (await fetch(&apos;http://hn.algolia.com/api/v1/search?query=&apos; + query)).json();
      if (!ignore) setState(result);
    }
    return () =&gt; { ignore = true; };
  }, [query]);
  return (
    &lt;&gt;
      &lt;input value={query} onChange={e =&gt; setQuery(e.target.value)} /&gt;
      {JSON.stringify(state)}
    &lt;/&gt;
  );
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function App() {
  const [query, setQuery] = useState(&apos;react&apos;);
  const [state, setState] = useState(null);
  useEffect(() =&gt; {
    let ignore = false;
    fetchSomething();
    async function fetchSomething() {
      const result = await (await fetch(&apos;http://hn.algolia.com/api/v1/search?query=&apos; + query)).json();
      if (!ignore) setState(result);
    }
    return () =&gt; { ignore = true; };
  }, [query]);
  return (
    &lt;&gt;
      &lt;input value={query} onChange={e =&gt; setQuery(e.target.value)} /&gt;
      {JSON.stringify(state)}
    &lt;/&gt;
  );
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    if (prop) {
      foo();
    }
  }, [prop]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    if (prop) {
      foo();
    }
  }, [prop]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    const handleResize = () =&gt; setState(window.innerWidth);
    window.addEventListener(&apos;resize&apos;, handleResize);
    return () =&gt; window.removeEventListener(&apos;resize&apos;, handleResize);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    const handleResize = () =&gt; setState(window.innerWidth);
    window.addEventListener(&apos;resize&apos;, handleResize);
    return () =&gt; window.removeEventListener(&apos;resize&apos;, handleResize);
  });
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Example() {
  useEffect(() =&gt; {
    arguments
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Example() {
  useEffect(() =&gt; {
    arguments
  }, [])
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Example() {
  useEffect(() =&gt; {
    const bar = () =&gt; {
      arguments;
    };
    bar();
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Example() {
  useEffect(() =&gt; {
    const bar = () =&gt; {
      arguments;
    };
    bar();
  }, [])
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, [props.upperViewHeight]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, [props.upperViewHeight]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props?.upperViewHeight]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props?.upperViewHeight]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useFoo(foo){
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useFoo(foo){
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useFoo(){
  const foo = &quot;hi!&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useFoo(){
  const foo = &quot;hi!&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useFoo(){
  let {foo} = {foo: 1};
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useFoo(){
  let {foo} = {foo: 1};
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useFoo(){
  let [foo] = [1];
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useFoo(){
  let [foo] = [1];
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useFoo() {
  const foo = &quot;fine&quot;;
  if (true) {
    // Shadowed variable with constant construction in a nested scope is fine.
    const foo = {};
  }
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function useFoo() {
  const foo = &quot;fine&quot;;
  if (true) {
    // Shadowed variable with constant construction in a nested scope is fine.
    const foo = {};
  }
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({foo}) {
  return useMemo(() =&gt; foo, [foo])
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent({foo}) {
  return useMemo(() =&gt; foo, [foo])
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const foo = true ? &quot;fine&quot; : &quot;also fine&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x valid 
function MyComponent() {
  const foo = true ? &quot;fine&quot; : &quot;also fine&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {} as string;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {} as string;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function App() {
  const foo = {x: 1};
  const bar = {x: 2};
  useEffect(() =&gt; {
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function App() {
  const foo = {x: 1};
  const bar = {x: 2};
  useEffect(() =&gt; {
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    toppings: pizza?.toppings,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    toppings: pizza?.toppings,
  }), []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza.crust.density,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza.crust.density,
  }), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    density: pizza?.crust.density,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    density: pizza?.crust.density,
  }), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza?.crust.density,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza?.crust.density,
  }), []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber + state);
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber + state);
  }, [])
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useMemo(() =&gt; {
    const someNumber: typeof state = 2;
    console.log(someNumber);
  }, [state])
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useMemo(() =&gt; {
    const someNumber: typeof state = 2;
    console.log(someNumber);
  }, [state])
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = {} as any;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = {} as any;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.baz);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.toString());
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.toString());
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  let local = 42;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  let local = 42;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = /foo/;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = /foo/;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const value = useMemo(() =&gt; { return 2*2; });
  const fn = useCallback(() =&gt; { alert(&apos;foo&apos;); });
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const value = useMemo(() =&gt; { return 2*2; });
  const fn = useCallback(() =&gt; { alert(&apos;foo&apos;); });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ fn1, fn2 }) {
  const value = useMemo(fn1);
  const fn = useCallback(fn2);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ fn1, fn2 }) {
  const value = useMemo(fn1);
  const fn = useCallback(fn2);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  useEffect()
  useLayoutEffect()
  useCallback()
  useMemo()
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  useEffect()
  useLayoutEffect()
  useCallback()
  useMemo()
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    if (true) {
      console.log(local);
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    if (true) {
      console.log(local);
    }
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    try {
      console.log(local);
    } finally {}
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    try {
      console.log(local);
    } finally {}
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    function inner() {
      console.log(local);
    }
    inner();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    function inner() {
      console.log(local);
    }
    inner();
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, []);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, []);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, [local1]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, [local1]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useMemo(() =&gt; {
    console.log(local1);
  }, [local1, local2]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useMemo(() =&gt; {
    console.log(local1);
  }, [local1, local2]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = {};
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = {};
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1]);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local, local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  useCallback(() =&gt; {}, [window]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  useCallback(() =&gt; {}, [window]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let local = props.foo;
  useCallback(() =&gt; {}, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let local = props.foo;
  useCallback(() =&gt; {}, [local]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history.foo.bar[2].dobedo.listen(),
      history.foo.bar().dobedo.listen[2]
    ];
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history.foo.bar[2].dobedo.listen(),
      history.foo.bar().dobedo.listen[2]
    ];
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history?.foo
    ];
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history?.foo
    ];
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  useEffect(() =&gt; {}, [&apos;foo&apos;]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  useEffect(() =&gt; {}, [&apos;foo&apos;]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [&apos;foo&apos;, &apos;bar&apos;]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [&apos;foo&apos;, &apos;bar&apos;]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [42, false, null]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [42, false, null]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const dependencies = [];
  useEffect(() =&gt; {}, dependencies);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const dependencies = [];
  useEffect(() =&gt; {}, dependencies);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, dependencies);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, dependencies);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, [...dependencies]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, [...dependencies]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local, ...dependencies]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local, ...dependencies]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [computeCacheKey(local)]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [computeCacheKey(local)]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items, props.items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items, props.items[0]]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items, items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items, items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {id: 42};
  useEffect(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {id: 42};
  useEffect(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id, local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let color = {}
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let color = {}
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz, props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz, props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(props.foo.fizz.bizz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(props.foo.fizz.bizz);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo.bar.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props);
    console.log(props.hello);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props);
    console.log(props.hello);
  }, [props.foo.bar.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [local, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [local, local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {
    const local1 = {};
    console.log(local1);
  }, [local1]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {
    const local1 = {};
    console.log(local1);
  }, [local1]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {}, [local1]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {}, [local1]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [c, a, g]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [c, a, g]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [a, c, g]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [a, c, g]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.notReactiveHook(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.notReactiveHook(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a ? local : b]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a ? local : b]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a &amp;&amp; local]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a &amp;&amp; local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props?.attribute.method()]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props?.attribute.method()]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props.method()]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props.method()]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, [ref]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, [ref]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1?.current?.focus();
    console.log(ref2?.current?.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1?.current?.focus();
    console.log(ref2?.current?.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ activeTab }) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.scrollTop = 0;
    ref2.current.scrollTop = 0;
  }, [ref1.current, ref2.current, activeTab]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ activeTab }) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.scrollTop = 0;
    ref2.current.scrollTop = 0;
  }, [ref1.current, ref2.current, activeTab]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ activeTab, initY }) {
  const ref1 = useRef();
  const ref2 = useRef();
  const fn = useCallback(() =&gt; {
    ref1.current.scrollTop = initY;
    ref2.current.scrollTop = initY;
  }, [ref1.current, ref2.current, activeTab, initY]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({ activeTab, initY }) {
  const ref1 = useRef();
  const ref2 = useRef();
  const fn = useCallback(() =&gt; {
    ref1.current.scrollTop = initY;
    ref2.current.scrollTop = initY;
  }, [ref1.current, ref2.current, activeTab, initY]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current, ref]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current, ref]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [])
});
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [])
});
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.onChange) {
      props.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.onChange) {
      props.onChange();
    }
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props?.onChange) {
      props?.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props?.onChange) {
      props?.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    function play() {
      props.onPlay();
    }
    function pause() {
      props.onPause();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    function play() {
      props.onPlay();
    }
    function pause() {
      props.onPause();
    }
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, [skillsCount, props.isEditMode, props.toggleEditMode]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, [skillsCount, props.isEditMode, props.toggleEditMode]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    externalCall(props);
    props.onChange();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    externalCall(props);
    props.onChange();
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    externalCall(props);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    externalCall(props);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let value4;
  let asyncValue;
  useEffect(() =&gt; {
    if (value4) {
      value = {};
    }
    value2 = 100;
    value = 43;
    value4 = true;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let value4;
  let asyncValue;
  useEffect(() =&gt; {
    if (value4) {
      value = {};
    }
    value2 = 100;
    value = 43;
    value4 = true;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let asyncValue;
  useEffect(() =&gt; {
    value = {};
    value2 = 100;
    value = 43;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, [value, value2, value3]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let asyncValue;
  useEffect(() =&gt; {
    value = {};
    value2 = 100;
    value = 43;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, [value, value2, value3]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef?.current?.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef?.current?.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef?.current?.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef?.current?.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  });
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  });
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function useMyThing(myRef, active) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    if (active) {
      myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
      return function() {
        setTimeout(() =&gt; {
          myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
        });
      }
    }
  }, [myRef, active]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function useMyThing(myRef, active) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    if (active) {
      myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
      return function() {
        setTimeout(() =&gt; {
          myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
        });
      }
    }
  }, [myRef, active]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
        function MyComponent() {
          const myRef = useRef();
          useLayoutEffect_SAFE_FOR_SSR(() =&gt; {
            const handleMove = () =&gt; {};
            myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
            return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
          });
          return &lt;div ref={myRef} /&gt;;
        }
      " name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
        function MyComponent() {
          const myRef = useRef();
          useLayoutEffect_SAFE_FOR_SSR(() =&gt; {
            const handleMove = () =&gt; {};
            myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
            return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
          });
          return &lt;div ref={myRef} /&gt;;
        }
      " time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  const local4 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
    console.log(local4);
  }, [local1, local3]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  const local4 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
    console.log(local4);
  }, [local1, local3]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [window]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [window]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
import MutableStore from &apos;store&apos;;

function MyComponent() {
  useEffect(() =&gt; {
    console.log(MutableStore.hello);
  }, [MutableStore.hello]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
import MutableStore from &apos;store&apos;;

function MyComponent() {
  useEffect(() =&gt; {
    console.log(MutableStore.hello);
  }, [MutableStore.hello]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    setTimeout(() =&gt; console.log(taint));
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    setTimeout(() =&gt; console.log(taint));
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  function handleChange() {}

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  function handleChange() {}

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  const handleChange = () =&gt; {};

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  const handleChange = () =&gt; {};

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  function handleNext(value) {
    setState(value);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  function handleNext(value) {
    setState(value);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);

  return &lt;div onClick={handleNext} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);

  return &lt;div onClick={handleNext} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, [handleNext2]);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, [handleNext3]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, [handleNext2]);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, [handleNext3]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
  return (
    &lt;div
      onClick={() =&gt; {
        handleNext1();
        setTimeout(handleNext2);
        setTimeout(() =&gt; {
          handleNext3();
        });
      }}
    /&gt;
  );
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
  return (
    &lt;div
      onClick={() =&gt; {
        handleNext1();
        setTimeout(handleNext2);
        setTimeout(() =&gt; {
          handleNext3();
        });
      }}
    /&gt;
  );
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const handleNext1 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  function handleNext2() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  const handleNext1 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  function handleNext2() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let handleNext = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  if (props.foo) {
    handleNext = () =&gt; {
      console.log(&apos;hello&apos;);
    };
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let handleNext = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  if (props.foo) {
    handleNext = () =&gt; {
      console.log(&apos;hello&apos;);
    };
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let taint = props.foo;

  function handleNext(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let taint = props.foo;

  function handleNext(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let increment = useCustomHook();

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let increment = useCustomHook();

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [increment]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [increment]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter({ increment }) {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter({ increment }) {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(count + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(count + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Podcasts() {
  useEffect(() =&gt; {
    alert(podcasts);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Podcasts() {
  useEffect(() =&gt; {
    alert(podcasts);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Podcasts({ api: { fetchPodcasts }, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Podcasts({ api: { fetchPodcasts }, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(id);
      fetchPodcasts(id).then(setPodcasts);
      fetchPodcasts2(id).then(setPodcasts);
    });
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(id);
      fetchPodcasts(id).then(setPodcasts);
      fetchPodcasts2(id).then(setPodcasts);
    });
  }, [id]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts?.(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts?.(id).then(setPodcasts);
  }, [id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Thing() {
  useEffect(() =&gt; {
    const fetchData = async () =&gt; {};
    fetchData();
  }, [fetchData]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Thing() {
  useEffect(() =&gt; {
    const fetchData = async () =&gt; {};
    fetchData();
  }, [fetchData]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    setState({});
  });
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    setState({});
  });
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Hello() {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData.then(setData);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Hello() {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData.then(setData);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Hello({ country }) {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData(country).then(setData);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Hello({ country }) {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData(country).then(setData);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Hello({ prop1, prop2 }) {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    if (prop1) {
      setState(prop2);
    }
  });
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Hello({ prop1, prop2 }) {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    if (prop1) {
      setState(prop2);
    }
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Thing() {
  useEffect(async () =&gt; {}, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Thing() {
  useEffect(async () =&gt; {}, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Thing() {
  useEffect(async () =&gt; {});
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Thing() {
  useEffect(async () =&gt; {});
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    prop.hello(foo);
  }, [foo]);
  const bar = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    prop.hello(foo);
  }, [foo]);
  const bar = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = function() {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = function() {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    otherThing();
  };
  const otherThing = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    otherThing();
  };
  const otherThing = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({myEffect}) {
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent({myEffect}) {
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(debounce(() =&gt; {
    console.log(local);
  }, delay), []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(debounce(() =&gt; {
    console.log(local);
  }, delay), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
    props.foo.bar.baz = 1;
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
    props.foo.bar.baz = 1;
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = [];
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = [];
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = () =&gt; {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = () =&gt; {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = function bar(){};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = function bar(){};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = class {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = class {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = true ? {} : &quot;fine&quot;;
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = true ? {} : &quot;fine&quot;;
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = bar || {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = bar || {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = bar ?? {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = bar ?? {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = bar &amp;&amp; {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = bar &amp;&amp; {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = bar ? baz ? {} : null : null;
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = bar ? baz ? {} : null : null;
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  let foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  let foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  var foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  var foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = {};
  useCallback(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = {};
  useCallback(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = {};
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = {};
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = {};
  useImperativeHandle(
    ref,
    () =&gt; {
       console.log(foo);
    },
    [foo]
  );
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Component() {
  const foo = {};
  useImperativeHandle(
    ref,
    () =&gt; {
       console.log(foo);
    },
    [foo]
  );
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo(section) {
  const foo = section.section_components?.edges ?? [];
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo(section) {
  const foo = section.section_components?.edges ?? [];
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo(section) {
  const foo = {};
  console.log(foo);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo(section) {
  const foo = {};
  console.log(foo);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = &lt;&gt;Hi!&lt;/&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = &lt;&gt;Hi!&lt;/&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = &lt;div&gt;Hi!&lt;/div&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = &lt;div&gt;Hi!&lt;/div&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = bar = {};
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = bar = {};
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = new String(&apos;foo&apos;); // Note &apos;foo&apos; will be boxed, and thus an object and thus compared by reference.
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = new String(&apos;foo&apos;); // Note &apos;foo&apos; will be boxed, and thus an object and thus compared by reference.
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = new Map([]);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = new Map([]);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = /reg/;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = /reg/;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  class Bar {};
  useMemo(() =&gt; {
    console.log(new Bar());
  }, [Bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  class Bar {};
  useMemo(() =&gt; {
    console.log(new Bar());
  }, [Bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@2.x invalid 
function Foo() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const ref = useRef() as React.MutableRefObject&lt;HTMLDivElement&gt;;
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const ref = useRef() as React.MutableRefObject&lt;HTMLDivElement&gt;;
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" time="0.3">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber);
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber);
  }, [])
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function App() {
  const foo = {x: 1};
  React.useEffect(() =&gt; {
    const bar = {x: 2};
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function App() {
  const foo = {x: 1};
  React.useEffect(() =&gt; {
    const bar = {x: 2};
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    const local = {};
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    const local = {};
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local1 = {};
  {
    const local2 = {};
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    });
  }
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local1 = {};
  {
    const local2 = {};
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    });
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1, local2]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1, local2]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local2]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local2]);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(unresolved);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(unresolved);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [,,,local,,,]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [,,,local,,,]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
    console.log(foo.slice(0));
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
    console.log(foo.slice(0));
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, [history]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, [history]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {});
  useLayoutEffect(() =&gt; {});
  useImperativeHandle(props.innerRef, () =&gt; {});
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {});
  useLayoutEffect(() =&gt; {});
  useImperativeHandle(props.innerRef, () =&gt; {});
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.bar, props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.bar, props.foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.foo, props.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.foo, props.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props.foo, props.bar, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props.foo, props.bar, local]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);

  let color = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz, color]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);

  let color = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz, color]);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar?.baz ?? null);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar?.baz ?? null);
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo?.bar]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.foo?.bar);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.foo?.bar);
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useMemo(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useMemo(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar?.toString());
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar?.toString());
  }, [props.foo.bar]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.toString());
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.toString());
  }, [props.foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar.toString());
  }, [props?.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar.toString());
  }, [props?.foo?.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, [props?.foo.bar?.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, [props?.foo.bar?.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const myEffect = () =&gt; {
    // Doesn&apos;t use anything
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const myEffect = () =&gt; {
    // Doesn&apos;t use anything
  };
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
const local = {};
function MyComponent() {
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
const local = {};
function MyComponent() {
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local = someFunc();
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local = someFunc();
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  function myEffect() {
    console.log(global);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  function myEffect() {
    console.log(global);
  }
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    otherThing()
  }
  const otherThing = () =&gt; {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    otherThing()
  }
  const otherThing = () =&gt; {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({delay}) {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [myEffect]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({delay}) {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [myEffect]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect,,]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect,,]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
let local = {};
function myEffect() {
  console.log(local);
}
function MyComponent() {
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
let local = {};
function myEffect() {
  console.log(local);
}
function MyComponent() {
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [myEffect]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [myEffect]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useWithoutEffectSuffix(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useWithoutEffectSuffix(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  return renderHelperConfusedWithEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  return renderHelperConfusedWithEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
const local = {};
useEffect(() =&gt; {
  console.log(local);
}, []);
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
const local = {};
useEffect(() =&gt; {
  console.log(local);
}, []);
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
const local1 = {};
{
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
const local1 = {};
{
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({ maybeRef2, foo }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();
  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();
  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();
  const [isPending1] = useTransition();
  const [isPending2, startTransition2] = useTransition();
  const [isPending3] = React.useTransition();
  const [isPending4, startTransition4] = React.useTransition();
  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();
    startTransition1();
    startTransition2();
    startTransition3();
    startTransition4();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    console.log(isPending2);
    console.log(isPending4);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,
    isPending2, isPending4,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch

    // In this test, we don&apos;t specify static deps.
    // That should be okay.
  ]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({ maybeRef2, foo }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();
  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();
  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();
  const [isPending1] = useTransition();
  const [isPending2, startTransition2] = useTransition();
  const [isPending3] = React.useTransition();
  const [isPending4, startTransition4] = React.useTransition();
  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();
    startTransition1();
    startTransition2();
    startTransition3();
    startTransition4();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    console.log(isPending2);
    console.log(isPending4);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,
    isPending2, isPending4,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch

    // In this test, we don&apos;t specify static deps.
    // That should be okay.
  ]);
}
" time="0.011">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({ maybeRef2 }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();

  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();

  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();

  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch,

    // In this test, we specify static deps.
    // That should be okay too!
    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2
  ]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({ maybeRef2 }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();

  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();

  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();

  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch,

    // In this test, we specify static deps.
    // That should be okay too!
    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2
  ]);
}
" time="0.012">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }))
});
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }))
});
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [props.hello])
});
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [props.hello])
});
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  let obj = someFunc();
  useEffect(() =&gt; {
    obj.foo = true;
  }, [obj]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  let obj = someFunc();
  useEffect(() =&gt; {
    obj.foo = true;
  }, [obj]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
  }, [foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
  }, [foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef?.current?.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef?.current?.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, [myRef]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useMyThing(myRef) {
  useCallback(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useMyThing(myRef) {
  useCallback(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      console.log(myRef.current)
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      console.log(myRef.current)
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; {};
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; {};
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, [local1, local2, local3]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, [local1, local2, local3]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  const local = props.local;
  useEffect(() =&gt; {}, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  const local = props.local;
  useEffect(() =&gt; {}, [local]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Foo({ activeTab }) {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [activeTab]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Foo({ activeTab }) {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [activeTab]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  const fn2 = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  const fn3 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  const fn4 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  const fn2 = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  const fn3 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  const fn4 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  function handleNext() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  function handleNext() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();

  function handleNext1(value) {
    let value2 = value * 100;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(foo(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(value);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();

  function handleNext1(value) {
    let value2 = value * 100;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(foo(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(value);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useInterval(callback, delay) {
  const savedCallback = useRef();
  useEffect(() =&gt; {
    savedCallback.current = callback;
  });
  useEffect(() =&gt; {
    function tick() {
      savedCallback.current();
    }
    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () =&gt; clearInterval(id);
    }
  }, [delay]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useInterval(callback, delay) {
  const savedCallback = useRef();
  useEffect(() =&gt; {
    savedCallback.current = callback;
  });
  useEffect(() =&gt; {
    function tick() {
      savedCallback.current();
    }
    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () =&gt; clearInterval(id);
    }
  }, [delay]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [setCount]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [setCount]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(c =&gt; c + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(c =&gt; c + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      dispatch(&apos;inc&apos;);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      dispatch(&apos;inc&apos;);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  const tick = () =&gt; {
    dispatch(&apos;inc&apos;);
  };

  useEffect(() =&gt; {
    let id = setInterval(tick, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  const tick = () =&gt; {
    dispatch(&apos;inc&apos;);
  };

  useEffect(() =&gt; {
    let id = setInterval(tick, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Podcasts() {
  useEffect(() =&gt; {
    setPodcasts([]);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Podcasts() {
  useEffect(() =&gt; {
    setPodcasts([]);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function withFetch(fetchPodcasts) {
  return function Podcasts({ id }) {
    let [podcasts, setPodcasts] = useState(null);
    useEffect(() =&gt; {
      fetchPodcasts(id).then(setPodcasts);
    }, [id]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function withFetch(fetchPodcasts) {
  return function Podcasts({ id }) {
    let [podcasts, setPodcasts] = useState(null);
    useEffect(() =&gt; {
      fetchPodcasts(id).then(setPodcasts);
    }, [id]);
  }
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Podcasts({ id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    function doFetch({ fetchPodcasts }) {
      fetchPodcasts(id).then(setPodcasts);
    }
    doFetch({ fetchPodcasts: API.fetchPodcasts });
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Podcasts({ id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    function doFetch({ fetchPodcasts }) {
      fetchPodcasts(id).then(setPodcasts);
    }
    doFetch({ fetchPodcasts: API.fetchPodcasts });
  }, [id]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
import increment from &apos;./increment&apos;;
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
import increment from &apos;./increment&apos;;
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function withStuff(increment) {
  return function Counter() {
    let [count, setCount] = useState(0);

    useEffect(() =&gt; {
      let id = setInterval(() =&gt; {
        setCount(count =&gt; count + increment);
      }, 1000);
      return () =&gt; clearInterval(id);
    }, []);

    return &lt;h1&gt;{count}&lt;/h1&gt;;
  }
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function withStuff(increment) {
  return function Counter() {
    let [count, setCount] = useState(0);

    useEffect(() =&gt; {
      let id = setInterval(() =&gt; {
        setCount(count =&gt; count + increment);
      }, 1000);
      return () =&gt; clearInterval(id);
    }, []);

    return &lt;h1&gt;{count}&lt;/h1&gt;;
  }
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function App() {
  const [query, setQuery] = useState(&apos;react&apos;);
  const [state, setState] = useState(null);
  useEffect(() =&gt; {
    let ignore = false;
    fetchSomething();
    async function fetchSomething() {
      const result = await (await fetch(&apos;http://hn.algolia.com/api/v1/search?query=&apos; + query)).json();
      if (!ignore) setState(result);
    }
    return () =&gt; { ignore = true; };
  }, [query]);
  return (
    &lt;&gt;
      &lt;input value={query} onChange={e =&gt; setQuery(e.target.value)} /&gt;
      {JSON.stringify(state)}
    &lt;/&gt;
  );
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function App() {
  const [query, setQuery] = useState(&apos;react&apos;);
  const [state, setState] = useState(null);
  useEffect(() =&gt; {
    let ignore = false;
    fetchSomething();
    async function fetchSomething() {
      const result = await (await fetch(&apos;http://hn.algolia.com/api/v1/search?query=&apos; + query)).json();
      if (!ignore) setState(result);
    }
    return () =&gt; { ignore = true; };
  }, [query]);
  return (
    &lt;&gt;
      &lt;input value={query} onChange={e =&gt; setQuery(e.target.value)} /&gt;
      {JSON.stringify(state)}
    &lt;/&gt;
  );
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    if (prop) {
      foo();
    }
  }, [prop]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    if (prop) {
      foo();
    }
  }, [prop]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    const handleResize = () =&gt; setState(window.innerWidth);
    window.addEventListener(&apos;resize&apos;, handleResize);
    return () =&gt; window.removeEventListener(&apos;resize&apos;, handleResize);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    const handleResize = () =&gt; setState(window.innerWidth);
    window.addEventListener(&apos;resize&apos;, handleResize);
    return () =&gt; window.removeEventListener(&apos;resize&apos;, handleResize);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Example() {
  useEffect(() =&gt; {
    arguments
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Example() {
  useEffect(() =&gt; {
    arguments
  }, [])
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Example() {
  useEffect(() =&gt; {
    const bar = () =&gt; {
      arguments;
    };
    bar();
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Example() {
  useEffect(() =&gt; {
    const bar = () =&gt; {
      arguments;
    };
    bar();
  }, [])
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, [props.upperViewHeight]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, [props.upperViewHeight]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props?.upperViewHeight]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props?.upperViewHeight]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useFoo(foo){
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useFoo(foo){
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useFoo(){
  const foo = &quot;hi!&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useFoo(){
  const foo = &quot;hi!&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useFoo(){
  let {foo} = {foo: 1};
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useFoo(){
  let {foo} = {foo: 1};
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useFoo(){
  let [foo] = [1];
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useFoo(){
  let [foo] = [1];
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useFoo() {
  const foo = &quot;fine&quot;;
  if (true) {
    // Shadowed variable with constant construction in a nested scope is fine.
    const foo = {};
  }
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function useFoo() {
  const foo = &quot;fine&quot;;
  if (true) {
    // Shadowed variable with constant construction in a nested scope is fine.
    const foo = {};
  }
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({foo}) {
  return useMemo(() =&gt; foo, [foo])
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent({foo}) {
  return useMemo(() =&gt; foo, [foo])
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const foo = true ? &quot;fine&quot; : &quot;also fine&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x valid 
function MyComponent() {
  const foo = true ? &quot;fine&quot; : &quot;also fine&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {} as string;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {} as string;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function App() {
  const foo = {x: 1};
  const bar = {x: 2};
  useEffect(() =&gt; {
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function App() {
  const foo = {x: 1};
  const bar = {x: 2};
  useEffect(() =&gt; {
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    toppings: pizza?.toppings,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    toppings: pizza?.toppings,
  }), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza.crust.density,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza.crust.density,
  }), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    density: pizza?.crust.density,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    density: pizza?.crust.density,
  }), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza?.crust.density,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza?.crust.density,
  }), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber + state);
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber + state);
  }, [])
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useMemo(() =&gt; {
    const someNumber: typeof state = 2;
    console.log(someNumber);
  }, [state])
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useMemo(() =&gt; {
    const someNumber: typeof state = 2;
    console.log(someNumber);
  }, [state])
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = {} as any;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = {} as any;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.toString());
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.toString());
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  let local = 42;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  let local = 42;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = /foo/;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = /foo/;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const value = useMemo(() =&gt; { return 2*2; });
  const fn = useCallback(() =&gt; { alert(&apos;foo&apos;); });
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const value = useMemo(() =&gt; { return 2*2; });
  const fn = useCallback(() =&gt; { alert(&apos;foo&apos;); });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ fn1, fn2 }) {
  const value = useMemo(fn1);
  const fn = useCallback(fn2);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ fn1, fn2 }) {
  const value = useMemo(fn1);
  const fn = useCallback(fn2);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  useEffect()
  useLayoutEffect()
  useCallback()
  useMemo()
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  useEffect()
  useLayoutEffect()
  useCallback()
  useMemo()
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    if (true) {
      console.log(local);
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    if (true) {
      console.log(local);
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    try {
      console.log(local);
    } finally {}
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    try {
      console.log(local);
    } finally {}
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    function inner() {
      console.log(local);
    }
    inner();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    function inner() {
      console.log(local);
    }
    inner();
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, []);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, []);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, [local1]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, [local1]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useMemo(() =&gt; {
    console.log(local1);
  }, [local1, local2]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useMemo(() =&gt; {
    console.log(local1);
  }, [local1, local2]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = {};
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = {};
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local, local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  useCallback(() =&gt; {}, [window]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  useCallback(() =&gt; {}, [window]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let local = props.foo;
  useCallback(() =&gt; {}, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let local = props.foo;
  useCallback(() =&gt; {}, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history.foo.bar[2].dobedo.listen(),
      history.foo.bar().dobedo.listen[2]
    ];
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history.foo.bar[2].dobedo.listen(),
      history.foo.bar().dobedo.listen[2]
    ];
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history?.foo
    ];
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history?.foo
    ];
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  useEffect(() =&gt; {}, [&apos;foo&apos;]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  useEffect(() =&gt; {}, [&apos;foo&apos;]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [&apos;foo&apos;, &apos;bar&apos;]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [&apos;foo&apos;, &apos;bar&apos;]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [42, false, null]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [42, false, null]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const dependencies = [];
  useEffect(() =&gt; {}, dependencies);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const dependencies = [];
  useEffect(() =&gt; {}, dependencies);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, dependencies);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, dependencies);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, [...dependencies]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, [...dependencies]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local, ...dependencies]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local, ...dependencies]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [computeCacheKey(local)]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [computeCacheKey(local)]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items[0]]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items, props.items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items, props.items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items, items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items, items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {id: 42};
  useEffect(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {id: 42};
  useEffect(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id, local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let color = {}
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let color = {}
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz, props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz, props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(props.foo.fizz.bizz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(props.foo.fizz.bizz);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo.bar.baz]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props);
    console.log(props.hello);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props);
    console.log(props.hello);
  }, [props.foo.bar.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [local, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [local, local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {
    const local1 = {};
    console.log(local1);
  }, [local1]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {
    const local1 = {};
    console.log(local1);
  }, [local1]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {}, [local1]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {}, [local1]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [c, a, g]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [c, a, g]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [a, c, g]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [a, c, g]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.notReactiveHook(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.notReactiveHook(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a ? local : b]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a ? local : b]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a &amp;&amp; local]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a &amp;&amp; local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props?.attribute.method()]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props?.attribute.method()]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props.method()]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props.method()]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, [ref]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, [ref]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1?.current?.focus();
    console.log(ref2?.current?.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1?.current?.focus();
    console.log(ref2?.current?.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ activeTab }) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.scrollTop = 0;
    ref2.current.scrollTop = 0;
  }, [ref1.current, ref2.current, activeTab]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ activeTab }) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.scrollTop = 0;
    ref2.current.scrollTop = 0;
  }, [ref1.current, ref2.current, activeTab]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ activeTab, initY }) {
  const ref1 = useRef();
  const ref2 = useRef();
  const fn = useCallback(() =&gt; {
    ref1.current.scrollTop = initY;
    ref2.current.scrollTop = initY;
  }, [ref1.current, ref2.current, activeTab, initY]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({ activeTab, initY }) {
  const ref1 = useRef();
  const ref2 = useRef();
  const fn = useCallback(() =&gt; {
    ref1.current.scrollTop = initY;
    ref2.current.scrollTop = initY;
  }, [ref1.current, ref2.current, activeTab, initY]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current, ref]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current, ref]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [])
});
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [])
});
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.onChange) {
      props.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.onChange) {
      props.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props?.onChange) {
      props?.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props?.onChange) {
      props?.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    function play() {
      props.onPlay();
    }
    function pause() {
      props.onPause();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    function play() {
      props.onPlay();
    }
    function pause() {
      props.onPause();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, [skillsCount, props.isEditMode, props.toggleEditMode]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, [skillsCount, props.isEditMode, props.toggleEditMode]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    externalCall(props);
    props.onChange();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    externalCall(props);
    props.onChange();
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    externalCall(props);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    externalCall(props);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let value4;
  let asyncValue;
  useEffect(() =&gt; {
    if (value4) {
      value = {};
    }
    value2 = 100;
    value = 43;
    value4 = true;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let value4;
  let asyncValue;
  useEffect(() =&gt; {
    if (value4) {
      value = {};
    }
    value2 = 100;
    value = 43;
    value4 = true;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let asyncValue;
  useEffect(() =&gt; {
    value = {};
    value2 = 100;
    value = 43;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, [value, value2, value3]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let asyncValue;
  useEffect(() =&gt; {
    value = {};
    value2 = 100;
    value = 43;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, [value, value2, value3]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef?.current?.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef?.current?.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef?.current?.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef?.current?.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  });
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  });
  return &lt;div ref={myRef} /&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function useMyThing(myRef, active) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    if (active) {
      myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
      return function() {
        setTimeout(() =&gt; {
          myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
        });
      }
    }
  }, [myRef, active]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function useMyThing(myRef, active) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    if (active) {
      myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
      return function() {
        setTimeout(() =&gt; {
          myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
        });
      }
    }
  }, [myRef, active]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
        function MyComponent() {
          const myRef = useRef();
          useLayoutEffect_SAFE_FOR_SSR(() =&gt; {
            const handleMove = () =&gt; {};
            myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
            return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
          });
          return &lt;div ref={myRef} /&gt;;
        }
      " name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
        function MyComponent() {
          const myRef = useRef();
          useLayoutEffect_SAFE_FOR_SSR(() =&gt; {
            const handleMove = () =&gt; {};
            myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
            return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
          });
          return &lt;div ref={myRef} /&gt;;
        }
      " time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  const local4 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
    console.log(local4);
  }, [local1, local3]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  const local4 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
    console.log(local4);
  }, [local1, local3]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [window]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [window]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
import MutableStore from &apos;store&apos;;

function MyComponent() {
  useEffect(() =&gt; {
    console.log(MutableStore.hello);
  }, [MutableStore.hello]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
import MutableStore from &apos;store&apos;;

function MyComponent() {
  useEffect(() =&gt; {
    console.log(MutableStore.hello);
  }, [MutableStore.hello]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    setTimeout(() =&gt; console.log(taint));
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    setTimeout(() =&gt; console.log(taint));
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.009">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  function handleChange() {}

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  function handleChange() {}

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  const handleChange = () =&gt; {};

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  const handleChange = () =&gt; {};

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  function handleNext(value) {
    setState(value);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  function handleNext(value) {
    setState(value);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);

  return &lt;div onClick={handleNext} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);

  return &lt;div onClick={handleNext} /&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, [handleNext2]);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, [handleNext3]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, [handleNext2]);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, [handleNext3]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
  return (
    &lt;div
      onClick={() =&gt; {
        handleNext1();
        setTimeout(handleNext2);
        setTimeout(() =&gt; {
          handleNext3();
        });
      }}
    /&gt;
  );
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
  return (
    &lt;div
      onClick={() =&gt; {
        handleNext1();
        setTimeout(handleNext2);
        setTimeout(() =&gt; {
          handleNext3();
        });
      }}
    /&gt;
  );
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const handleNext1 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  function handleNext2() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  const handleNext1 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  function handleNext2() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let handleNext = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  if (props.foo) {
    handleNext = () =&gt; {
      console.log(&apos;hello&apos;);
    };
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let handleNext = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  if (props.foo) {
    handleNext = () =&gt; {
      console.log(&apos;hello&apos;);
    };
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let taint = props.foo;

  function handleNext(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let taint = props.foo;

  function handleNext(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let increment = useCustomHook();

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let increment = useCustomHook();

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [increment]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [increment]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter({ increment }) {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter({ increment }) {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(count + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(count + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Podcasts() {
  useEffect(() =&gt; {
    alert(podcasts);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Podcasts() {
  useEffect(() =&gt; {
    alert(podcasts);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Podcasts({ api: { fetchPodcasts }, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Podcasts({ api: { fetchPodcasts }, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(id);
      fetchPodcasts(id).then(setPodcasts);
      fetchPodcasts2(id).then(setPodcasts);
    });
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(id);
      fetchPodcasts(id).then(setPodcasts);
      fetchPodcasts2(id).then(setPodcasts);
    });
  }, [id]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts?.(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts?.(id).then(setPodcasts);
  }, [id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Thing() {
  useEffect(() =&gt; {
    const fetchData = async () =&gt; {};
    fetchData();
  }, [fetchData]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Thing() {
  useEffect(() =&gt; {
    const fetchData = async () =&gt; {};
    fetchData();
  }, [fetchData]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    setState({});
  });
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    setState({});
  });
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Hello() {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData.then(setData);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Hello() {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData.then(setData);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Hello({ country }) {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData(country).then(setData);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Hello({ country }) {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData(country).then(setData);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Hello({ prop1, prop2 }) {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    if (prop1) {
      setState(prop2);
    }
  });
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Hello({ prop1, prop2 }) {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    if (prop1) {
      setState(prop2);
    }
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Thing() {
  useEffect(async () =&gt; {}, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Thing() {
  useEffect(async () =&gt; {}, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Thing() {
  useEffect(async () =&gt; {});
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Thing() {
  useEffect(async () =&gt; {});
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    prop.hello(foo);
  }, [foo]);
  const bar = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    prop.hello(foo);
  }, [foo]);
  const bar = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = function() {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = function() {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    otherThing();
  };
  const otherThing = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    otherThing();
  };
  const otherThing = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [local]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({myEffect}) {
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent({myEffect}) {
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(debounce(() =&gt; {
    console.log(local);
  }, delay), []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(debounce(() =&gt; {
    console.log(local);
  }, delay), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
    props.foo.bar.baz = 1;
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
    props.foo.bar.baz = 1;
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = [];
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = [];
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = () =&gt; {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = () =&gt; {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = function bar(){};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = function bar(){};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = class {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = class {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = true ? {} : &quot;fine&quot;;
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = true ? {} : &quot;fine&quot;;
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = bar || {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = bar || {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = bar ?? {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = bar ?? {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = bar &amp;&amp; {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = bar &amp;&amp; {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = bar ? baz ? {} : null : null;
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = bar ? baz ? {} : null : null;
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  let foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  let foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  var foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  var foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = {};
  useCallback(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = {};
  useCallback(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = {};
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = {};
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = {};
  useImperativeHandle(
    ref,
    () =&gt; {
       console.log(foo);
    },
    [foo]
  );
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Component() {
  const foo = {};
  useImperativeHandle(
    ref,
    () =&gt; {
       console.log(foo);
    },
    [foo]
  );
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo(section) {
  const foo = section.section_components?.edges ?? [];
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo(section) {
  const foo = section.section_components?.edges ?? [];
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo(section) {
  const foo = {};
  console.log(foo);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo(section) {
  const foo = {};
  console.log(foo);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = &lt;&gt;Hi!&lt;/&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = &lt;&gt;Hi!&lt;/&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = &lt;div&gt;Hi!&lt;/div&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = &lt;div&gt;Hi!&lt;/div&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = bar = {};
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = bar = {};
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = new String(&apos;foo&apos;); // Note &apos;foo&apos; will be boxed, and thus an object and thus compared by reference.
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = new String(&apos;foo&apos;); // Note &apos;foo&apos; will be boxed, and thus an object and thus compared by reference.
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = new Map([]);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = new Map([]);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = /reg/;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = /reg/;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  class Bar {};
  useMemo(() =&gt; {
    console.log(new Bar());
  }, [Bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  class Bar {};
  useMemo(() =&gt; {
    console.log(new Bar());
  }, [Bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@3.x invalid 
function Foo() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const ref = useRef() as React.MutableRefObject&lt;HTMLDivElement&gt;;
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const ref = useRef() as React.MutableRefObject&lt;HTMLDivElement&gt;;
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" time="0.559">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber);
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber);
  }, [])
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function App() {
  const foo = {x: 1};
  React.useEffect(() =&gt; {
    const bar = {x: 2};
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function App() {
  const foo = {x: 1};
  React.useEffect(() =&gt; {
    const bar = {x: 2};
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  });
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    const local = {};
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    const local = {};
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local1 = {};
  {
    const local2 = {};
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    });
  }
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local1 = {};
  {
    const local2 = {};
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    });
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1, local2]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1, local2]);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local2]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local2]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(unresolved);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(unresolved);
  }, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [,,,local,,,]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [,,,local,,,]);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
    console.log(foo.slice(0));
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
    console.log(foo.slice(0));
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, [history]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, [history]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {});
  useLayoutEffect(() =&gt; {});
  useImperativeHandle(props.innerRef, () =&gt; {});
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {});
  useLayoutEffect(() =&gt; {});
  useImperativeHandle(props.innerRef, () =&gt; {});
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.bar, props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.bar, props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.foo, props.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.foo, props.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props.foo, props.bar, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props.foo, props.bar, local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);

  let color = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz, color]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);

  let color = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz, color]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar?.baz ?? null);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar?.baz ?? null);
  }, [props.foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo?.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.foo?.bar);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.foo?.bar);
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useMemo(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useMemo(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar?.toString());
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar?.toString());
  }, [props.foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.toString());
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.toString());
  }, [props.foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar.toString());
  }, [props?.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar.toString());
  }, [props?.foo?.bar]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, [props?.foo.bar?.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, [props?.foo.bar?.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const myEffect = () =&gt; {
    // Doesn&apos;t use anything
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const myEffect = () =&gt; {
    // Doesn&apos;t use anything
  };
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
const local = {};
function MyComponent() {
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
const local = {};
function MyComponent() {
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local = someFunc();
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local = someFunc();
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, [local]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  function myEffect() {
    console.log(global);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  function myEffect() {
    console.log(global);
  }
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    otherThing()
  }
  const otherThing = () =&gt; {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    otherThing()
  }
  const otherThing = () =&gt; {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({delay}) {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [myEffect]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({delay}) {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [myEffect]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect,,]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect,,]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
let local = {};
function myEffect() {
  console.log(local);
}
function MyComponent() {
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
let local = {};
function myEffect() {
  console.log(local);
}
function MyComponent() {
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [myEffect]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [myEffect]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({myEffect}) {
  useEffect(myEffect);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  });
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useWithoutEffectSuffix(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useWithoutEffectSuffix(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  return renderHelperConfusedWithEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  return renderHelperConfusedWithEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
const local = {};
useEffect(() =&gt; {
  console.log(local);
}, []);
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
const local = {};
useEffect(() =&gt; {
  console.log(local);
}, []);
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
const local1 = {};
{
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
const local1 = {};
{
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({ maybeRef2, foo }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();
  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();
  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();
  const [isPending1] = useTransition();
  const [isPending2, startTransition2] = useTransition();
  const [isPending3] = React.useTransition();
  const [isPending4, startTransition4] = React.useTransition();
  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();
    startTransition1();
    startTransition2();
    startTransition3();
    startTransition4();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    console.log(isPending2);
    console.log(isPending4);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,
    isPending2, isPending4,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch

    // In this test, we don&apos;t specify static deps.
    // That should be okay.
  ]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({ maybeRef2, foo }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();
  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();
  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();
  const [isPending1] = useTransition();
  const [isPending2, startTransition2] = useTransition();
  const [isPending3] = React.useTransition();
  const [isPending4, startTransition4] = React.useTransition();
  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();
    startTransition1();
    startTransition2();
    startTransition3();
    startTransition4();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    console.log(isPending2);
    console.log(isPending4);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,
    isPending2, isPending4,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch

    // In this test, we don&apos;t specify static deps.
    // That should be okay.
  ]);
}
" time="0.015">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({ maybeRef2 }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();

  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();

  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();

  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch,

    // In this test, we specify static deps.
    // That should be okay too!
    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2
  ]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({ maybeRef2 }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();

  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();

  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();

  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch,

    // In this test, we specify static deps.
    // That should be okay too!
    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2
  ]);
}
" time="0.009">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }))
});
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }))
});
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [props.hello])
});
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [props.hello])
});
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  let obj = someFunc();
  useEffect(() =&gt; {
    obj.foo = true;
  }, [obj]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  let obj = someFunc();
  useEffect(() =&gt; {
    obj.foo = true;
  }, [obj]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
  }, [foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
  }, [foo.bar]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef?.current?.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef?.current?.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, [myRef]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useMyThing(myRef) {
  useCallback(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useMyThing(myRef) {
  useCallback(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      console.log(myRef.current)
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      console.log(myRef.current)
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; {};
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; {};
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, [local1, local2, local3]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, [local1, local2, local3]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  const local = props.local;
  useEffect(() =&gt; {}, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  const local = props.local;
  useEffect(() =&gt; {}, [local]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Foo({ activeTab }) {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [activeTab]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Foo({ activeTab }) {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [activeTab]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  const fn2 = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  const fn3 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  const fn4 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  const fn2 = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  const fn3 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  const fn4 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  function handleNext() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  function handleNext() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();

  function handleNext1(value) {
    let value2 = value * 100;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(foo(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(value);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();

  function handleNext1(value) {
    let value2 = value * 100;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(foo(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(value);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.009">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useInterval(callback, delay) {
  const savedCallback = useRef();
  useEffect(() =&gt; {
    savedCallback.current = callback;
  });
  useEffect(() =&gt; {
    function tick() {
      savedCallback.current();
    }
    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () =&gt; clearInterval(id);
    }
  }, [delay]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useInterval(callback, delay) {
  const savedCallback = useRef();
  useEffect(() =&gt; {
    savedCallback.current = callback;
  });
  useEffect(() =&gt; {
    function tick() {
      savedCallback.current();
    }
    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () =&gt; clearInterval(id);
    }
  }, [delay]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [setCount]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [setCount]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(c =&gt; c + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(c =&gt; c + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      dispatch(&apos;inc&apos;);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      dispatch(&apos;inc&apos;);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  const tick = () =&gt; {
    dispatch(&apos;inc&apos;);
  };

  useEffect(() =&gt; {
    let id = setInterval(tick, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  const tick = () =&gt; {
    dispatch(&apos;inc&apos;);
  };

  useEffect(() =&gt; {
    let id = setInterval(tick, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Podcasts() {
  useEffect(() =&gt; {
    setPodcasts([]);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Podcasts() {
  useEffect(() =&gt; {
    setPodcasts([]);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function withFetch(fetchPodcasts) {
  return function Podcasts({ id }) {
    let [podcasts, setPodcasts] = useState(null);
    useEffect(() =&gt; {
      fetchPodcasts(id).then(setPodcasts);
    }, [id]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function withFetch(fetchPodcasts) {
  return function Podcasts({ id }) {
    let [podcasts, setPodcasts] = useState(null);
    useEffect(() =&gt; {
      fetchPodcasts(id).then(setPodcasts);
    }, [id]);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Podcasts({ id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    function doFetch({ fetchPodcasts }) {
      fetchPodcasts(id).then(setPodcasts);
    }
    doFetch({ fetchPodcasts: API.fetchPodcasts });
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Podcasts({ id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    function doFetch({ fetchPodcasts }) {
      fetchPodcasts(id).then(setPodcasts);
    }
    doFetch({ fetchPodcasts: API.fetchPodcasts });
  }, [id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
import increment from &apos;./increment&apos;;
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
import increment from &apos;./increment&apos;;
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function withStuff(increment) {
  return function Counter() {
    let [count, setCount] = useState(0);

    useEffect(() =&gt; {
      let id = setInterval(() =&gt; {
        setCount(count =&gt; count + increment);
      }, 1000);
      return () =&gt; clearInterval(id);
    }, []);

    return &lt;h1&gt;{count}&lt;/h1&gt;;
  }
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function withStuff(increment) {
  return function Counter() {
    let [count, setCount] = useState(0);

    useEffect(() =&gt; {
      let id = setInterval(() =&gt; {
        setCount(count =&gt; count + increment);
      }, 1000);
      return () =&gt; clearInterval(id);
    }, []);

    return &lt;h1&gt;{count}&lt;/h1&gt;;
  }
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function App() {
  const [query, setQuery] = useState(&apos;react&apos;);
  const [state, setState] = useState(null);
  useEffect(() =&gt; {
    let ignore = false;
    fetchSomething();
    async function fetchSomething() {
      const result = await (await fetch(&apos;http://hn.algolia.com/api/v1/search?query=&apos; + query)).json();
      if (!ignore) setState(result);
    }
    return () =&gt; { ignore = true; };
  }, [query]);
  return (
    &lt;&gt;
      &lt;input value={query} onChange={e =&gt; setQuery(e.target.value)} /&gt;
      {JSON.stringify(state)}
    &lt;/&gt;
  );
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function App() {
  const [query, setQuery] = useState(&apos;react&apos;);
  const [state, setState] = useState(null);
  useEffect(() =&gt; {
    let ignore = false;
    fetchSomething();
    async function fetchSomething() {
      const result = await (await fetch(&apos;http://hn.algolia.com/api/v1/search?query=&apos; + query)).json();
      if (!ignore) setState(result);
    }
    return () =&gt; { ignore = true; };
  }, [query]);
  return (
    &lt;&gt;
      &lt;input value={query} onChange={e =&gt; setQuery(e.target.value)} /&gt;
      {JSON.stringify(state)}
    &lt;/&gt;
  );
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    if (prop) {
      foo();
    }
  }, [prop]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    if (prop) {
      foo();
    }
  }, [prop]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    const handleResize = () =&gt; setState(window.innerWidth);
    window.addEventListener(&apos;resize&apos;, handleResize);
    return () =&gt; window.removeEventListener(&apos;resize&apos;, handleResize);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    const handleResize = () =&gt; setState(window.innerWidth);
    window.addEventListener(&apos;resize&apos;, handleResize);
    return () =&gt; window.removeEventListener(&apos;resize&apos;, handleResize);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Example() {
  useEffect(() =&gt; {
    arguments
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Example() {
  useEffect(() =&gt; {
    arguments
  }, [])
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Example() {
  useEffect(() =&gt; {
    const bar = () =&gt; {
      arguments;
    };
    bar();
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Example() {
  useEffect(() =&gt; {
    const bar = () =&gt; {
      arguments;
    };
    bar();
  }, [])
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, [props.upperViewHeight]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, [props.upperViewHeight]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props?.upperViewHeight]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props?.upperViewHeight]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useFoo(foo){
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useFoo(foo){
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useFoo(){
  const foo = &quot;hi!&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useFoo(){
  const foo = &quot;hi!&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useFoo(){
  let {foo} = {foo: 1};
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useFoo(){
  let {foo} = {foo: 1};
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useFoo(){
  let [foo] = [1];
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useFoo(){
  let [foo] = [1];
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useFoo() {
  const foo = &quot;fine&quot;;
  if (true) {
    // Shadowed variable with constant construction in a nested scope is fine.
    const foo = {};
  }
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function useFoo() {
  const foo = &quot;fine&quot;;
  if (true) {
    // Shadowed variable with constant construction in a nested scope is fine.
    const foo = {};
  }
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({foo}) {
  return useMemo(() =&gt; foo, [foo])
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent({foo}) {
  return useMemo(() =&gt; foo, [foo])
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const foo = true ? &quot;fine&quot; : &quot;also fine&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x valid 
function MyComponent() {
  const foo = true ? &quot;fine&quot; : &quot;also fine&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo({ Component }) {
  React.useEffect(() =&gt; {
    console.log(&lt;Component /&gt;);
  }, []);
};
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo({ Component }) {
  React.useEffect(() =&gt; {
    console.log(&lt;Component /&gt;);
  }, []);
};
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {} as string;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {} as string;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function App() {
  const foo = {x: 1};
  const bar = {x: 2};
  useEffect(() =&gt; {
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function App() {
  const foo = {x: 1};
  const bar = {x: 2};
  useEffect(() =&gt; {
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    toppings: pizza?.toppings,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    toppings: pizza?.toppings,
  }), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza.crust.density,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza.crust.density,
  }), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    density: pizza?.crust.density,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    density: pizza?.crust.density,
  }), []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza?.crust.density,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza?.crust.density,
  }), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber + state);
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber + state);
  }, [])
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useMemo(() =&gt; {
    const someNumber: typeof state = 2;
    console.log(someNumber);
  }, [state])
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useMemo(() =&gt; {
    const someNumber: typeof state = 2;
    console.log(someNumber);
  }, [state])
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = {} as any;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = {} as any;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.baz);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.toString());
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.toString());
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  let local = 42;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  let local = 42;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = /foo/;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = /foo/;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const value = useMemo(() =&gt; { return 2*2; });
  const fn = useCallback(() =&gt; { alert(&apos;foo&apos;); });
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const value = useMemo(() =&gt; { return 2*2; });
  const fn = useCallback(() =&gt; { alert(&apos;foo&apos;); });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ fn1, fn2 }) {
  const value = useMemo(fn1);
  const fn = useCallback(fn2);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ fn1, fn2 }) {
  const value = useMemo(fn1);
  const fn = useCallback(fn2);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  useEffect()
  useLayoutEffect()
  useCallback()
  useMemo()
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  useEffect()
  useLayoutEffect()
  useCallback()
  useMemo()
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    if (true) {
      console.log(local);
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    if (true) {
      console.log(local);
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    try {
      console.log(local);
    } finally {}
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    try {
      console.log(local);
    } finally {}
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    function inner() {
      console.log(local);
    }
    inner();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    function inner() {
      console.log(local);
    }
    inner();
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, []);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, []);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, [local1]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, [local1]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useMemo(() =&gt; {
    console.log(local1);
  }, [local1, local2]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useMemo(() =&gt; {
    console.log(local1);
  }, [local1, local2]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = {};
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = {};
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1]);
  }
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local, local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  useCallback(() =&gt; {}, [window]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  useCallback(() =&gt; {}, [window]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let local = props.foo;
  useCallback(() =&gt; {}, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let local = props.foo;
  useCallback(() =&gt; {}, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history.foo.bar[2].dobedo.listen(),
      history.foo.bar().dobedo.listen[2]
    ];
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history.foo.bar[2].dobedo.listen(),
      history.foo.bar().dobedo.listen[2]
    ];
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history?.foo
    ];
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history?.foo
    ];
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  useEffect(() =&gt; {}, [&apos;foo&apos;]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  useEffect(() =&gt; {}, [&apos;foo&apos;]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [&apos;foo&apos;, &apos;bar&apos;]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [&apos;foo&apos;, &apos;bar&apos;]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [42, false, null]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [42, false, null]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const dependencies = [];
  useEffect(() =&gt; {}, dependencies);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const dependencies = [];
  useEffect(() =&gt; {}, dependencies);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, dependencies);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, dependencies);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, [...dependencies]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, [...dependencies]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local, ...dependencies]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local, ...dependencies]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [computeCacheKey(local)]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [computeCacheKey(local)]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items, props.items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items, props.items[0]]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items[0]]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items, items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items, items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {id: 42};
  useEffect(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {id: 42};
  useEffect(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" time="0.01">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id, local]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let color = {}
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let color = {}
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz, props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz, props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(props.foo.fizz.bizz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(props.foo.fizz.bizz);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo.bar.baz]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props);
    console.log(props.hello);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props);
    console.log(props.hello);
  }, [props.foo.bar.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [local, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [local, local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {
    const local1 = {};
    console.log(local1);
  }, [local1]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {
    const local1 = {};
    console.log(local1);
  }, [local1]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {}, [local1]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {}, [local1]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [c, a, g]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [c, a, g]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [a, c, g]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [a, c, g]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.notReactiveHook(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.notReactiveHook(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a ? local : b]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a ? local : b]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a &amp;&amp; local]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a &amp;&amp; local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props?.attribute.method()]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props?.attribute.method()]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props.method()]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props.method()]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, [ref]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, [ref]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1?.current?.focus();
    console.log(ref2?.current?.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1?.current?.focus();
    console.log(ref2?.current?.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ activeTab }) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.scrollTop = 0;
    ref2.current.scrollTop = 0;
  }, [ref1.current, ref2.current, activeTab]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ activeTab }) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.scrollTop = 0;
    ref2.current.scrollTop = 0;
  }, [ref1.current, ref2.current, activeTab]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ activeTab, initY }) {
  const ref1 = useRef();
  const ref2 = useRef();
  const fn = useCallback(() =&gt; {
    ref1.current.scrollTop = initY;
    ref2.current.scrollTop = initY;
  }, [ref1.current, ref2.current, activeTab, initY]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({ activeTab, initY }) {
  const ref1 = useRef();
  const ref2 = useRef();
  const fn = useCallback(() =&gt; {
    ref1.current.scrollTop = initY;
    ref2.current.scrollTop = initY;
  }, [ref1.current, ref2.current, activeTab, initY]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current, ref]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current, ref]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [])
});
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [])
});
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.onChange) {
      props.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.onChange) {
      props.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props?.onChange) {
      props?.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props?.onChange) {
      props?.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    function play() {
      props.onPlay();
    }
    function pause() {
      props.onPause();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    function play() {
      props.onPlay();
    }
    function pause() {
      props.onPause();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, [skillsCount, props.isEditMode, props.toggleEditMode]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, [skillsCount, props.isEditMode, props.toggleEditMode]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    externalCall(props);
    props.onChange();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    externalCall(props);
    props.onChange();
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    externalCall(props);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    externalCall(props);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let value4;
  let asyncValue;
  useEffect(() =&gt; {
    if (value4) {
      value = {};
    }
    value2 = 100;
    value = 43;
    value4 = true;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let value4;
  let asyncValue;
  useEffect(() =&gt; {
    if (value4) {
      value = {};
    }
    value2 = 100;
    value = 43;
    value4 = true;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let asyncValue;
  useEffect(() =&gt; {
    value = {};
    value2 = 100;
    value = 43;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, [value, value2, value3]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let asyncValue;
  useEffect(() =&gt; {
    value = {};
    value2 = 100;
    value = 43;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, [value, value2, value3]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef?.current?.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef?.current?.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef?.current?.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef?.current?.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  });
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  });
  return &lt;div ref={myRef} /&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function useMyThing(myRef, active) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    if (active) {
      myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
      return function() {
        setTimeout(() =&gt; {
          myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
        });
      }
    }
  }, [myRef, active]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function useMyThing(myRef, active) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    if (active) {
      myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
      return function() {
        setTimeout(() =&gt; {
          myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
        });
      }
    }
  }, [myRef, active]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
        function MyComponent() {
          const myRef = useRef();
          useLayoutEffect_SAFE_FOR_SSR(() =&gt; {
            const handleMove = () =&gt; {};
            myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
            return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
          });
          return &lt;div ref={myRef} /&gt;;
        }
      " name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
        function MyComponent() {
          const myRef = useRef();
          useLayoutEffect_SAFE_FOR_SSR(() =&gt; {
            const handleMove = () =&gt; {};
            myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
            return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
          });
          return &lt;div ref={myRef} /&gt;;
        }
      " time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  const local4 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
    console.log(local4);
  }, [local1, local3]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  const local4 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
    console.log(local4);
  }, [local1, local3]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [window]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [window]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
import MutableStore from &apos;store&apos;;

function MyComponent() {
  useEffect(() =&gt; {
    console.log(MutableStore.hello);
  }, [MutableStore.hello]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
import MutableStore from &apos;store&apos;;

function MyComponent() {
  useEffect(() =&gt; {
    console.log(MutableStore.hello);
  }, [MutableStore.hello]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    setTimeout(() =&gt; console.log(taint));
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    setTimeout(() =&gt; console.log(taint));
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  function handleChange() {}

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  function handleChange() {}

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  const handleChange = () =&gt; {};

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  const handleChange = () =&gt; {};

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  function handleNext(value) {
    setState(value);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  function handleNext(value) {
    setState(value);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);

  return &lt;div onClick={handleNext} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);

  return &lt;div onClick={handleNext} /&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, [handleNext2]);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, [handleNext3]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, [handleNext2]);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, [handleNext3]);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
  return (
    &lt;div
      onClick={() =&gt; {
        handleNext1();
        setTimeout(handleNext2);
        setTimeout(() =&gt; {
          handleNext3();
        });
      }}
    /&gt;
  );
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
  return (
    &lt;div
      onClick={() =&gt; {
        handleNext1();
        setTimeout(handleNext2);
        setTimeout(() =&gt; {
          handleNext3();
        });
      }}
    /&gt;
  );
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const handleNext1 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  function handleNext2() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  const handleNext1 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  function handleNext2() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let handleNext = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  if (props.foo) {
    handleNext = () =&gt; {
      console.log(&apos;hello&apos;);
    };
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let handleNext = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  if (props.foo) {
    handleNext = () =&gt; {
      console.log(&apos;hello&apos;);
    };
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let taint = props.foo;

  function handleNext(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let taint = props.foo;

  function handleNext(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let increment = useCustomHook();

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let increment = useCustomHook();

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [increment]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [increment]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter({ increment }) {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter({ increment }) {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(count + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(count + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Podcasts() {
  useEffect(() =&gt; {
    alert(podcasts);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Podcasts() {
  useEffect(() =&gt; {
    alert(podcasts);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Podcasts({ api: { fetchPodcasts }, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Podcasts({ api: { fetchPodcasts }, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(id);
      fetchPodcasts(id).then(setPodcasts);
      fetchPodcasts2(id).then(setPodcasts);
    });
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(id);
      fetchPodcasts(id).then(setPodcasts);
      fetchPodcasts2(id).then(setPodcasts);
    });
  }, [id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts?.(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts?.(id).then(setPodcasts);
  }, [id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Thing() {
  useEffect(() =&gt; {
    const fetchData = async () =&gt; {};
    fetchData();
  }, [fetchData]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Thing() {
  useEffect(() =&gt; {
    const fetchData = async () =&gt; {};
    fetchData();
  }, [fetchData]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    setState({});
  });
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    setState({});
  });
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Hello() {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData.then(setData);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Hello() {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData.then(setData);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Hello({ country }) {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData(country).then(setData);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Hello({ country }) {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData(country).then(setData);
  });
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Hello({ prop1, prop2 }) {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    if (prop1) {
      setState(prop2);
    }
  });
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Hello({ prop1, prop2 }) {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    if (prop1) {
      setState(prop2);
    }
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Thing() {
  useEffect(async () =&gt; {}, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Thing() {
  useEffect(async () =&gt; {}, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Thing() {
  useEffect(async () =&gt; {});
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Thing() {
  useEffect(async () =&gt; {});
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    prop.hello(foo);
  }, [foo]);
  const bar = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    prop.hello(foo);
  }, [foo]);
  const bar = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = function() {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = function() {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    otherThing();
  };
  const otherThing = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    otherThing();
  };
  const otherThing = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({myEffect}) {
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent({myEffect}) {
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(debounce(() =&gt; {
    console.log(local);
  }, delay), []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(debounce(() =&gt; {
    console.log(local);
  }, delay), []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
    props.foo.bar.baz = 1;
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
    props.foo.bar.baz = 1;
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = [];
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = [];
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = () =&gt; {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = () =&gt; {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = function bar(){};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = function bar(){};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = class {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = class {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = true ? {} : &quot;fine&quot;;
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = true ? {} : &quot;fine&quot;;
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = bar || {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = bar || {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = bar ?? {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = bar ?? {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = bar &amp;&amp; {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = bar &amp;&amp; {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = bar ? baz ? {} : null : null;
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = bar ? baz ? {} : null : null;
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  let foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  let foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  var foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  var foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = {};
  useCallback(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = {};
  useCallback(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = {};
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = {};
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = {};
  useImperativeHandle(
    ref,
    () =&gt; {
       console.log(foo);
    },
    [foo]
  );
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Component() {
  const foo = {};
  useImperativeHandle(
    ref,
    () =&gt; {
       console.log(foo);
    },
    [foo]
  );
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo(section) {
  const foo = section.section_components?.edges ?? [];
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo(section) {
  const foo = section.section_components?.edges ?? [];
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo(section) {
  const foo = {};
  console.log(foo);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo(section) {
  const foo = {};
  console.log(foo);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = &lt;&gt;Hi!&lt;/&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = &lt;&gt;Hi!&lt;/&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = &lt;div&gt;Hi!&lt;/div&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = &lt;div&gt;Hi!&lt;/div&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = bar = {};
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = bar = {};
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = new String(&apos;foo&apos;); // Note &apos;foo&apos; will be boxed, and thus an object and thus compared by reference.
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = new String(&apos;foo&apos;); // Note &apos;foo&apos; will be boxed, and thus an object and thus compared by reference.
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = new Map([]);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = new Map([]);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = /reg/;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = /reg/;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  class Bar {};
  useMemo(() =&gt; {
    console.log(new Bar());
  }, [Bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  class Bar {};
  useMemo(() =&gt; {
    console.log(new Bar());
  }, [Bar]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@4.x invalid 
function Foo() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const ref = useRef() as React.MutableRefObject&lt;HTMLDivElement&gt;;
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const ref = useRef() as React.MutableRefObject&lt;HTMLDivElement&gt;;
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" time="0.489">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber);
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber);
  }, [])
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function App() {
  const foo = {x: 1};
  React.useEffect(() =&gt; {
    const bar = {x: 2};
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function App() {
  const foo = {x: 1};
  React.useEffect(() =&gt; {
    const bar = {x: 2};
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  useEffect(() =&gt; {
    const local = {};
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  useEffect(() =&gt; {
    const local = {};
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local1 = {};
  {
    const local2 = {};
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    });
  }
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local1 = {};
  {
    const local2 = {};
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    });
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1, local2]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1, local2]);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local2]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = someFunc();
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local2]);
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(unresolved);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  useEffect(() =&gt; {
    console.log(unresolved);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [,,,local,,,]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [,,,local,,,]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
    console.log(foo.slice(0));
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({ foo }) {
  useEffect(() =&gt; {
    console.log(foo.length);
    console.log(foo.slice(0));
  }, [foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, [history]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, [history]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {});
  useLayoutEffect(() =&gt; {});
  useImperativeHandle(props.innerRef, () =&gt; {});
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {});
  useLayoutEffect(() =&gt; {});
  useImperativeHandle(props.innerRef, () =&gt; {});
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.bar, props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.bar, props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.foo, props.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props.foo, props.bar]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props.foo, props.bar, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props.foo, props.bar, local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);

  let color = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz, color]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);

  let color = someFunc();
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz, color]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar?.baz ?? null);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar?.baz ?? null);
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo?.bar]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo?.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar);
    console.log(props.foo?.bar);
  }, [props.foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.foo?.bar);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.foo?.bar);
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useMemo(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useMemo(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar?.toString());
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar?.toString());
  }, [props.foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.toString());
  }, [props.foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.toString());
  }, [props.foo.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar.toString());
  }, [props?.foo?.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo.bar.toString());
  }, [props?.foo?.bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, [props?.foo.bar?.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, [props?.foo.bar?.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const myEffect = () =&gt; {
    // Doesn&apos;t use anything
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const myEffect = () =&gt; {
    // Doesn&apos;t use anything
  };
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
const local = {};
function MyComponent() {
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
const local = {};
function MyComponent() {
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local = someFunc();
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local = someFunc();
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  function myEffect() {
    console.log(global);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  function myEffect() {
    console.log(global);
  }
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    otherThing()
  }
  const otherThing = () =&gt; {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
const local = {};
function MyComponent() {
  const myEffect = () =&gt; {
    otherThing()
  }
  const otherThing = () =&gt; {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({delay}) {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [myEffect]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({delay}) {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [myEffect]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect,,]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [,myEffect,,]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
let local = {};
function myEffect() {
  console.log(local);
}
function MyComponent() {
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
let local = {};
function myEffect() {
  console.log(local);
}
function MyComponent() {
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [myEffect]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({myEffect}) {
  useEffect(myEffect, [myEffect]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({myEffect}) {
  useEffect(myEffect);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({myEffect}) {
  useEffect(myEffect);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  });
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, [props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useWithoutEffectSuffix(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useWithoutEffectSuffix(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  return renderHelperConfusedWithEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  return renderHelperConfusedWithEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
const local = {};
useEffect(() =&gt; {
  console.log(local);
}, []);
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
const local = {};
useEffect(() =&gt; {
  console.log(local);
}, []);
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
const local1 = {};
{
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
const local1 = {};
{
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({ maybeRef2, foo }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();
  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();
  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();
  const [isPending1] = useTransition();
  const [isPending2, startTransition2] = useTransition();
  const [isPending3] = React.useTransition();
  const [isPending4, startTransition4] = React.useTransition();
  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();
    startTransition1();
    startTransition2();
    startTransition3();
    startTransition4();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    console.log(isPending2);
    console.log(isPending4);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,
    isPending2, isPending4,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch

    // In this test, we don&apos;t specify static deps.
    // That should be okay.
  ]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({ maybeRef2, foo }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();
  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();
  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();
  const [isPending1] = useTransition();
  const [isPending2, startTransition2] = useTransition();
  const [isPending3] = React.useTransition();
  const [isPending4, startTransition4] = React.useTransition();
  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();
    startTransition1();
    startTransition2();
    startTransition3();
    startTransition4();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    console.log(isPending2);
    console.log(isPending4);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,
    isPending2, isPending4,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch

    // In this test, we don&apos;t specify static deps.
    // That should be okay.
  ]);
}
" time="0.011">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({ maybeRef2 }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();

  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();

  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();

  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch,

    // In this test, we specify static deps.
    // That should be okay too!
    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2
  ]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({ maybeRef2 }) {
  const definitelyRef1 = useRef();
  const definitelyRef2 = useRef();
  const maybeRef1 = useSomeOtherRefyThing();

  const [state1, setState1] = useState();
  const [state2, setState2] = React.useState();
  const [state3, dispatch1] = useReducer();
  const [state4, dispatch2] = React.useReducer();

  const [state5, maybeSetState] = useFunnyState();
  const [state6, maybeDispatch] = useFunnyReducer();

  const mySetState = useCallback(() =&gt; {}, []);
  let myDispatch = useCallback(() =&gt; {}, []);

  useEffect(() =&gt; {
    // Known to be static
    console.log(definitelyRef1.current);
    console.log(definitelyRef2.current);
    console.log(maybeRef1.current);
    console.log(maybeRef2.current);
    setState1();
    setState2();
    dispatch1();
    dispatch2();

    // Dynamic
    console.log(state1);
    console.log(state2);
    console.log(state3);
    console.log(state4);
    console.log(state5);
    console.log(state6);
    mySetState();
    myDispatch();

    // Not sure; assume dynamic
    maybeSetState();
    maybeDispatch();
  }, [
    // Dynamic
    state1, state2, state3, state4, state5, state6,
    maybeRef1, maybeRef2,

    // Not sure; assume dynamic
    mySetState, myDispatch,
    maybeSetState, maybeDispatch,

    // In this test, we specify static deps.
    // That should be okay too!
    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2
  ]);
}
" time="0.009">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }))
});
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }))
});
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [props.hello])
});
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [props.hello])
});
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  let obj = someFunc();
  useEffect(() =&gt; {
    obj.foo = true;
  }, [obj]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  let obj = someFunc();
  useEffect(() =&gt; {
    obj.foo = true;
  }, [obj]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
  }, [foo.bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
  }, [foo.bar]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef?.current?.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef?.current?.toString())
    };
  }, []);
  return &lt;div /&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current = {};
    return () =&gt; {
      console.log(myRef.current.toString())
    };
  }, [myRef]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    const node = myRef.current;
    node.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; node.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useMyThing(myRef) {
  useCallback(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useMyThing(myRef) {
  useCallback(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      console.log(myRef.current)
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      console.log(myRef.current)
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; {};
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useMyThing() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {
      return () =&gt; window.removeEventListener(&apos;mousemove&apos;, handleMove);
    };
    window.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; {};
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, [local1, local2, local3]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
  }, [local1, local2, local3]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  const local = props.local;
  useEffect(() =&gt; {}, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  const local = props.local;
  useEffect(() =&gt; {}, [local]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Foo({ activeTab }) {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [activeTab]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Foo({ activeTab }) {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [activeTab]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  useEffect(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  const fn2 = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  const fn3 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  const fn4 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props]);
  const fn2 = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo]);
  const fn3 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar]);
  const fn4 = useMemo(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz]);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  function handleNext() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  function handleNext() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();

  function handleNext1(value) {
    let value2 = value * 100;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(foo(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(value);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();

  function handleNext1(value) {
    let value2 = value * 100;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(foo(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(value);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useInterval(callback, delay) {
  const savedCallback = useRef();
  useEffect(() =&gt; {
    savedCallback.current = callback;
  });
  useEffect(() =&gt; {
    function tick() {
      savedCallback.current();
    }
    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () =&gt; clearInterval(id);
    }
  }, [delay]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useInterval(callback, delay) {
  const savedCallback = useRef();
  useEffect(() =&gt; {
    savedCallback.current = callback;
  });
  useEffect(() =&gt; {
    function tick() {
      savedCallback.current();
    }
    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () =&gt; clearInterval(id);
    }
  }, [delay]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [setCount]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [setCount]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(c =&gt; c + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(c =&gt; c + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      dispatch(&apos;inc&apos;);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      dispatch(&apos;inc&apos;);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  const tick = () =&gt; {
    dispatch(&apos;inc&apos;);
  };

  useEffect(() =&gt; {
    let id = setInterval(tick, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Counter() {
  const [count, dispatch] = useReducer((state, action) =&gt; {
    if (action === &apos;inc&apos;) {
      return state + 1;
    }
  }, 0);

  const tick = () =&gt; {
    dispatch(&apos;inc&apos;);
  };

  useEffect(() =&gt; {
    let id = setInterval(tick, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Podcasts() {
  useEffect(() =&gt; {
    setPodcasts([]);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Podcasts() {
  useEffect(() =&gt; {
    setPodcasts([]);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function withFetch(fetchPodcasts) {
  return function Podcasts({ id }) {
    let [podcasts, setPodcasts] = useState(null);
    useEffect(() =&gt; {
      fetchPodcasts(id).then(setPodcasts);
    }, [id]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function withFetch(fetchPodcasts) {
  return function Podcasts({ id }) {
    let [podcasts, setPodcasts] = useState(null);
    useEffect(() =&gt; {
      fetchPodcasts(id).then(setPodcasts);
    }, [id]);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Podcasts({ id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    function doFetch({ fetchPodcasts }) {
      fetchPodcasts(id).then(setPodcasts);
    }
    doFetch({ fetchPodcasts: API.fetchPodcasts });
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Podcasts({ id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    function doFetch({ fetchPodcasts }) {
      fetchPodcasts(id).then(setPodcasts);
    }
    doFetch({ fetchPodcasts: API.fetchPodcasts });
  }, [id]);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Counter() {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + 1;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
import increment from &apos;./increment&apos;;
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
import increment from &apos;./increment&apos;;
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function withStuff(increment) {
  return function Counter() {
    let [count, setCount] = useState(0);

    useEffect(() =&gt; {
      let id = setInterval(() =&gt; {
        setCount(count =&gt; count + increment);
      }, 1000);
      return () =&gt; clearInterval(id);
    }, []);

    return &lt;h1&gt;{count}&lt;/h1&gt;;
  }
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function withStuff(increment) {
  return function Counter() {
    let [count, setCount] = useState(0);

    useEffect(() =&gt; {
      let id = setInterval(() =&gt; {
        setCount(count =&gt; count + increment);
      }, 1000);
      return () =&gt; clearInterval(id);
    }, []);

    return &lt;h1&gt;{count}&lt;/h1&gt;;
  }
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function App() {
  const [query, setQuery] = useState(&apos;react&apos;);
  const [state, setState] = useState(null);
  useEffect(() =&gt; {
    let ignore = false;
    fetchSomething();
    async function fetchSomething() {
      const result = await (await fetch(&apos;http://hn.algolia.com/api/v1/search?query=&apos; + query)).json();
      if (!ignore) setState(result);
    }
    return () =&gt; { ignore = true; };
  }, [query]);
  return (
    &lt;&gt;
      &lt;input value={query} onChange={e =&gt; setQuery(e.target.value)} /&gt;
      {JSON.stringify(state)}
    &lt;/&gt;
  );
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function App() {
  const [query, setQuery] = useState(&apos;react&apos;);
  const [state, setState] = useState(null);
  useEffect(() =&gt; {
    let ignore = false;
    fetchSomething();
    async function fetchSomething() {
      const result = await (await fetch(&apos;http://hn.algolia.com/api/v1/search?query=&apos; + query)).json();
      if (!ignore) setState(result);
    }
    return () =&gt; { ignore = true; };
  }, [query]);
  return (
    &lt;&gt;
      &lt;input value={query} onChange={e =&gt; setQuery(e.target.value)} /&gt;
      {JSON.stringify(state)}
    &lt;/&gt;
  );
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    if (prop) {
      foo();
    }
  }, [prop]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    if (prop) {
      foo();
    }
  }, [prop]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    const handleResize = () =&gt; setState(window.innerWidth);
    window.addEventListener(&apos;resize&apos;, handleResize);
    return () =&gt; window.removeEventListener(&apos;resize&apos;, handleResize);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    const handleResize = () =&gt; setState(window.innerWidth);
    window.addEventListener(&apos;resize&apos;, handleResize);
    return () =&gt; window.removeEventListener(&apos;resize&apos;, handleResize);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Example() {
  useEffect(() =&gt; {
    arguments
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Example() {
  useEffect(() =&gt; {
    arguments
  }, [])
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Example() {
  useEffect(() =&gt; {
    const bar = () =&gt; {
      arguments;
    };
    bar();
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Example() {
  useEffect(() =&gt; {
    const bar = () =&gt; {
      arguments;
    };
    bar();
  }, [])
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, [props.upperViewHeight]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, [props.upperViewHeight]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props?.upperViewHeight]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props?.upperViewHeight]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, [props]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useFoo(foo){
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useFoo(foo){
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useFoo(){
  const foo = &quot;hi!&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useFoo(){
  const foo = &quot;hi!&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useFoo(){
  let {foo} = {foo: 1};
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useFoo(){
  let {foo} = {foo: 1};
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useFoo(){
  let [foo] = [1];
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useFoo(){
  let [foo] = [1];
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useFoo() {
  const foo = &quot;fine&quot;;
  if (true) {
    // Shadowed variable with constant construction in a nested scope is fine.
    const foo = {};
  }
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function useFoo() {
  const foo = &quot;fine&quot;;
  if (true) {
    // Shadowed variable with constant construction in a nested scope is fine.
    const foo = {};
  }
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({foo}) {
  return useMemo(() =&gt; foo, [foo])
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent({foo}) {
  return useMemo(() =&gt; foo, [foo])
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const foo = true ? &quot;fine&quot; : &quot;also fine&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 valid 
function MyComponent() {
  const foo = true ? &quot;fine&quot; : &quot;also fine&quot;;
  return useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo({ Component }) {
  React.useEffect(() =&gt; {
    console.log(&lt;Component /&gt;);
  }, []);
};
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo({ Component }) {
  React.useEffect(() =&gt; {
    console.log(&lt;Component /&gt;);
  }, []);
};
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {} as string;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {} as string;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function App() {
  const foo = {x: 1};
  const bar = {x: 2};
  useEffect(() =&gt; {
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function App() {
  const foo = {x: 1};
  const bar = {x: 2};
  useEffect(() =&gt; {
    const baz = bar as typeof foo;
    console.log(baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    toppings: pizza?.toppings,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    toppings: pizza?.toppings,
  }), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza.crust.density,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza.crust.density,
  }), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    density: pizza?.crust.density,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza.crust,
    density: pizza?.crust.density,
  }), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza?.crust.density,
  }), []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const pizza = {};

  useEffect(() =&gt; ({
    crust: pizza?.crust,
    density: pizza?.crust.density,
  }), []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props.upperViewHeight;
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Example(props) {
  useEffect(() =&gt; {
    let topHeight = 0;
    topHeight = props?.upperViewHeight;
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber + state);
  }, [])
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useEffect(() =&gt; {
    const someNumber: typeof state = 2;
    setState(prevState =&gt; prevState + someNumber + state);
  }, [])
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useMemo(() =&gt; {
    const someNumber: typeof state = 2;
    console.log(someNumber);
  }, [state])
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const [state, setState] = React.useState&lt;number&gt;(0);

  useMemo(() =&gt; {
    const someNumber: typeof state = 2;
    console.log(someNumber);
  }, [state])
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = {} as any;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = {} as any;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.toString());
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar?.baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.toString());
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useCallback(() =&gt; {
    console.log(props.foo?.bar.toString());
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter(unstableProp) {
  let [count, setCount] = useState(0);
  setCount = unstableProp
  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(c =&gt; c + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  let local = 42;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  let local = 42;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = /foo/;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = /foo/;
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const value = useMemo(() =&gt; { return 2*2; });
  const fn = useCallback(() =&gt; { alert(&apos;foo&apos;); });
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const value = useMemo(() =&gt; { return 2*2; });
  const fn = useCallback(() =&gt; { alert(&apos;foo&apos;); });
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ fn1, fn2 }) {
  const value = useMemo(fn1);
  const fn = useCallback(fn2);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ fn1, fn2 }) {
  const value = useMemo(fn1);
  const fn = useCallback(fn2);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  useEffect()
  useLayoutEffect()
  useCallback()
  useMemo()
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  useEffect()
  useLayoutEffect()
  useCallback()
  useMemo()
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    if (true) {
      console.log(local);
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    if (true) {
      console.log(local);
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    try {
      console.log(local);
    } finally {}
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    try {
      console.log(local);
    } finally {}
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    function inner() {
      console.log(local);
    }
    inner();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    function inner() {
      console.log(local);
    }
    inner();
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, []);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local1 = someFunc();
  {
    const local2 = someFunc();
    useEffect(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, []);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, [local1]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
  }, [local1]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useMemo(() =&gt; {
    console.log(local1);
  }, [local1, local2]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local1 = {};
  const local2 = {};
  useMemo(() =&gt; {
    console.log(local1);
  }, [local1, local2]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = {};
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local1 = someFunc();
  function MyNestedComponent() {
    const local2 = {};
    useCallback(() =&gt; {
      console.log(local1);
      console.log(local2);
    }, [local1]);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
    console.log(local);
  }, [local, local]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  useCallback(() =&gt; {}, [window]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  useCallback(() =&gt; {}, [window]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let local = props.foo;
  useCallback(() =&gt; {}, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let local = props.foo;
  useCallback(() =&gt; {}, [local]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return history.listen();
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history.foo.bar[2].dobedo.listen(),
      history.foo.bar().dobedo.listen[2]
    ];
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history.foo.bar[2].dobedo.listen(),
      history.foo.bar().dobedo.listen[2]
    ];
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history?.foo
    ];
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ history }) {
  useEffect(() =&gt; {
    return [
      history?.foo
    ];
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  useEffect(() =&gt; {}, [&apos;foo&apos;]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  useEffect(() =&gt; {}, [&apos;foo&apos;]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [&apos;foo&apos;, &apos;bar&apos;]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [&apos;foo&apos;, &apos;bar&apos;]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [42, false, null]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ foo, bar, baz }) {
  useEffect(() =&gt; {
    console.log(foo, bar, baz);
  }, [42, false, null]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const dependencies = [];
  useEffect(() =&gt; {}, dependencies);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const dependencies = [];
  useEffect(() =&gt; {}, dependencies);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, dependencies);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, dependencies);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, [...dependencies]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  const dependencies = [local];
  useEffect(() =&gt; {
    console.log(local);
  }, [...dependencies]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local, ...dependencies]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = someFunc();
  useEffect(() =&gt; {
    console.log(local);
  }, [local, ...dependencies]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [computeCacheKey(local)]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [computeCacheKey(local)]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items, props.items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.items[0]);
  }, [props.items, props.items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items[0]]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items, items[0]]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ items }) {
  useEffect(() =&gt; {
    console.log(items[0]);
  }, [items, items[0]]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, [props, props.foo]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const local = {};
  useCallback(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {id: 42};
  useEffect(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {id: 42};
  useEffect(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {id: 42};
  const fn = useCallback(() =&gt; {
    console.log(local);
  }, [local.id, local]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let color = {}
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let color = {}
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(color);
  }, [props.foo, props.foo.bar.baz]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz, props.foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
  }, [props.foo.bar.baz, props.foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(props.foo.fizz.bizz);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar.baz);
    console.log(props.foo.fizz.bizz);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props.foo.bar);
  }, [props.foo.bar.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props);
    console.log(props.hello);
  }, [props.foo.bar.baz]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const fn = useCallback(() =&gt; {
    console.log(props);
    console.log(props.hello);
  }, [props.foo.bar.baz]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [local, local]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [local, local]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {
    const local1 = {};
    console.log(local1);
  }, [local1]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {
    const local1 = {};
    console.log(local1);
  }, [local1]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {}, [local1]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local1 = {};
  useCallback(() =&gt; {}, [local1]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [c, a, g]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [c, a, g]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [a, c, g]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, [a, c, g]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let a, b, c, d, e, f, g;
  useEffect(() =&gt; {
    console.log(b, e, d, c, a, g, f);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const local = {};
  useEffect(() =&gt; {
    console.log(props.foo);
    console.log(props.bar);
    console.log(local);
  }, [props]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.notReactiveHook(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCallback(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useMemo(() =&gt; {
    console.log(props.foo);
  }, []);
  React.notReactiveHook(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useEffect(() =&gt; {
    console.log(props.foo);
  }, []);
  React.useCustomEffect(() =&gt; {
    console.log(props.foo);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a ? local : b]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a ? local : b]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a &amp;&amp; local]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, [a &amp;&amp; local]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props?.attribute.method()]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props?.attribute.method()]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props.method()]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {}, [props.method()]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, [ref]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const ref = useRef();
  const [state, setState] = useState();
  useEffect(() =&gt; {
    ref.current = {};
    setState(state + 1);
  }, [ref]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, []);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.focus();
    console.log(ref2.current.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1?.current?.focus();
    console.log(ref2?.current?.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1?.current?.focus();
    console.log(ref2?.current?.textContent);
    alert(props.someOtherRefs.current.innerHTML);
    fetch(props.color);
  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ activeTab }) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.scrollTop = 0;
    ref2.current.scrollTop = 0;
  }, [ref1.current, ref2.current, activeTab]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ activeTab }) {
  const ref1 = useRef();
  const ref2 = useRef();
  useEffect(() =&gt; {
    ref1.current.scrollTop = 0;
    ref2.current.scrollTop = 0;
  }, [ref1.current, ref2.current, activeTab]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ activeTab, initY }) {
  const ref1 = useRef();
  const ref2 = useRef();
  const fn = useCallback(() =&gt; {
    ref1.current.scrollTop = initY;
    ref2.current.scrollTop = initY;
  }, [ref1.current, ref2.current, activeTab, initY]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({ activeTab, initY }) {
  const ref1 = useRef();
  const ref2 = useRef();
  const fn = useCallback(() =&gt; {
    ref1.current.scrollTop = initY;
    ref2.current.scrollTop = initY;
  }, [ref1.current, ref2.current, activeTab, initY]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current, ref]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const ref = useRef();
  useEffect(() =&gt; {
    console.log(ref.current);
  }, [ref.current, ref]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [])
});
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
const MyComponent = forwardRef((props, ref) =&gt; {
  useImperativeHandle(ref, () =&gt; ({
    focus() {
      alert(props.hello);
    }
  }), [])
});
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.onChange) {
      props.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.onChange) {
      props.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props?.onChange) {
      props?.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props?.onChange) {
      props?.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    function play() {
      props.onPlay();
    }
    function pause() {
      props.onPause();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    function play() {
      props.onPlay();
    }
    function pause() {
      props.onPause();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    if (props.foo.onChange) {
      props.foo.onChange();
    }
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, [skillsCount, props.isEditMode, props.toggleEditMode]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, [skillsCount, props.isEditMode, props.toggleEditMode]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const [skillsCount] = useState();
  useEffect(() =&gt; {
    if (skillsCount === 0 &amp;&amp; !props.isEditMode) {
      props.toggleEditMode();
    }
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    externalCall(props);
    props.onChange();
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    externalCall(props);
    props.onChange();
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    externalCall(props);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  useEffect(() =&gt; {
    props.onChange();
    externalCall(props);
  }, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let value4;
  let asyncValue;
  useEffect(() =&gt; {
    if (value4) {
      value = {};
    }
    value2 = 100;
    value = 43;
    value4 = true;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let value4;
  let asyncValue;
  useEffect(() =&gt; {
    if (value4) {
      value = {};
    }
    value2 = 100;
    value = 43;
    value4 = true;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let asyncValue;
  useEffect(() =&gt; {
    value = {};
    value2 = 100;
    value = 43;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, [value, value2, value3]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let value;
  let value2;
  let value3;
  let asyncValue;
  useEffect(() =&gt; {
    value = {};
    value2 = 100;
    value = 43;
    console.log(value2);
    console.log(value3);
    setTimeout(() =&gt; {
      asyncValue = 100;
    });
  }, [value, value2, value3]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef?.current?.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef?.current?.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef?.current?.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef?.current?.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, []);
  return &lt;div ref={myRef} /&gt;;
}
" time="0.007">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  });
  return &lt;div ref={myRef} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const myRef = useRef();
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  });
  return &lt;div ref={myRef} /&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
    return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
  }, [myRef]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function useMyThing(myRef) {
  useEffect(() =&gt; {
    const handleMouse = () =&gt; {};
    myRef.current.addEventListener(&apos;mousemove&apos;, handleMouse);
    myRef.current.addEventListener(&apos;mousein&apos;, handleMouse);
    return function() {
      setTimeout(() =&gt; {
        myRef.current.removeEventListener(&apos;mousemove&apos;, handleMouse);
        myRef.current.removeEventListener(&apos;mousein&apos;, handleMouse);
      });
    }
  }, [myRef]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function useMyThing(myRef, active) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    if (active) {
      myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
      return function() {
        setTimeout(() =&gt; {
          myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
        });
      }
    }
  }, [myRef, active]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function useMyThing(myRef, active) {
  useEffect(() =&gt; {
    const handleMove = () =&gt; {};
    if (active) {
      myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
      return function() {
        setTimeout(() =&gt; {
          myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
        });
      }
    }
  }, [myRef, active]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
        function MyComponent() {
          const myRef = useRef();
          useLayoutEffect_SAFE_FOR_SSR(() =&gt; {
            const handleMove = () =&gt; {};
            myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
            return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
          });
          return &lt;div ref={myRef} /&gt;;
        }
      " name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
        function MyComponent() {
          const myRef = useRef();
          useLayoutEffect_SAFE_FOR_SSR(() =&gt; {
            const handleMove = () =&gt; {};
            myRef.current.addEventListener(&apos;mousemove&apos;, handleMove);
            return () =&gt; myRef.current.removeEventListener(&apos;mousemove&apos;, handleMove);
          });
          return &lt;div ref={myRef} /&gt;;
        }
      " time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  const local4 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
    console.log(local4);
  }, [local1, local3]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local1 = 42;
  const local2 = &apos;42&apos;;
  const local3 = null;
  const local4 = {};
  useEffect(() =&gt; {
    console.log(local1);
    console.log(local2);
    console.log(local3);
    console.log(local4);
  }, [local1, local3]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [window]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  useEffect(() =&gt; {
    window.scrollTo(0, 0);
  }, [window]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
import MutableStore from &apos;store&apos;;

function MyComponent() {
  useEffect(() =&gt; {
    console.log(MutableStore.hello);
  }, [MutableStore.hello]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
import MutableStore from &apos;store&apos;;

function MyComponent() {
  useEffect(() =&gt; {
    console.log(MutableStore.hello);
  }, [MutableStore.hello]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    useEffect(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);
  }
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
import MutableStore from &apos;store&apos;;
let z = {};

function MyComponent(props) {
  let x = props.foo;
  {
    let y = props.bar;
    const fn = useCallback(() =&gt; {
      // nothing
    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);
  }
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    setTimeout(() =&gt; console.log(taint));
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    setTimeout(() =&gt; console.log(taint));
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.005">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  function handleChange() {}

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  function handleChange() {}

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.013">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  const handleChange = () =&gt; {};

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let [, dispatch] = React.useReducer();
  let taint = props.foo;

  // Shouldn&apos;t affect anything
  const handleChange = () =&gt; {};

  function handleNext1(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = (value) =&gt; {
    setState(taint(value));
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function(value) {
    console.log(taint);
    dispatch({ type: &apos;x&apos;, value });
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, []);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, []);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, []);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let [, setState] = useState();

  function handleNext(value) {
    setState(value);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let [, setState] = useState();

  function handleNext(value) {
    setState(value);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);

  return &lt;div onClick={handleNext} /&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let [, setState] = useState();

  const handleNext = (value) =&gt; {
    setState(value);
  };

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);

  return &lt;div onClick={handleNext} /&gt;;
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, [handleNext2]);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, [handleNext3]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    return Store.subscribe(handleNext2);
  }, [handleNext2]);
  useMemo(() =&gt; {
    return Store.subscribe(handleNext3);
  }, [handleNext3]);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
}
" time="0.008">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
  return (
    &lt;div
      onClick={() =&gt; {
        handleNext1();
        setTimeout(handleNext2);
        setTimeout(() =&gt; {
          handleNext3();
        });
      }}
    /&gt;
  );
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  function handleNext1() {
    console.log(&apos;hello&apos;);
  }
  const handleNext2 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  let handleNext3 = function() {
    console.log(&apos;hello&apos;);
  };
  useEffect(() =&gt; {
    handleNext1();
    return Store.subscribe(() =&gt; handleNext1());
  }, [handleNext1]);
  useLayoutEffect(() =&gt; {
    handleNext2();
    return Store.subscribe(() =&gt; handleNext2());
  }, [handleNext2]);
  useMemo(() =&gt; {
    handleNext3();
    return Store.subscribe(() =&gt; handleNext3());
  }, [handleNext3]);
  return (
    &lt;div
      onClick={() =&gt; {
        handleNext1();
        setTimeout(handleNext2);
        setTimeout(() =&gt; {
          handleNext3();
        });
      }}
    /&gt;
  );
}
" time="0.01">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const handleNext1 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  function handleNext2() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  const handleNext1 = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  function handleNext2() {
    console.log(&apos;hello&apos;);
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
  useEffect(() =&gt; {
    return Store.subscribe(handleNext1);
    return Store.subscribe(handleNext2);
  }, [handleNext1, handleNext2]);
}
" time="0.006">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let handleNext = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  if (props.foo) {
    handleNext = () =&gt; {
      console.log(&apos;hello&apos;);
    };
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let handleNext = () =&gt; {
    console.log(&apos;hello&apos;);
  };
  if (props.foo) {
    handleNext = () =&gt; {
      console.log(&apos;hello&apos;);
    };
  }
  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.018">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let taint = props.foo;

  function handleNext(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let [, setState] = useState();
  let taint = props.foo;

  function handleNext(value) {
    let value2 = value * taint;
    setState(value2);
    console.log(&apos;hello&apos;);
  }

  useEffect(() =&gt; {
    return Store.subscribe(handleNext);
  }, [handleNext]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter() {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + 1);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let [increment, setIncrement] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let increment = useCustomHook();

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter() {
  let [count, setCount] = useState(0);
  let increment = useCustomHook();

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [increment]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter({ step }) {
  let [count, setCount] = useState(0);

  function increment(x) {
    return x + step;
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; increment(count));
    }, 1000);
    return () =&gt; clearInterval(id);
  }, [increment]);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter({ increment }) {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter({ increment }) {
  let [count, setCount] = useState(0);

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      setCount(count =&gt; count + increment);
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(count + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Counter() {
  const [count, setCount] = useState(0);

  function tick() {
    setCount(count + 1);
  }

  useEffect(() =&gt; {
    let id = setInterval(() =&gt; {
      tick();
    }, 1000);
    return () =&gt; clearInterval(id);
  }, []);

  return &lt;h1&gt;{count}&lt;/h1&gt;;
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Podcasts() {
  useEffect(() =&gt; {
    alert(podcasts);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Podcasts() {
  useEffect(() =&gt; {
    alert(podcasts);
  }, []);
  let [podcasts, setPodcasts] = useState(null);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Podcasts({ api: { fetchPodcasts }, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Podcasts({ api: { fetchPodcasts }, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(id);
      fetchPodcasts(id).then(setPodcasts);
      fetchPodcasts2(id).then(setPodcasts);
    });
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    setTimeout(() =&gt; {
      console.log(id);
      fetchPodcasts(id).then(setPodcasts);
      fetchPodcasts2(id).then(setPodcasts);
    });
  }, [id]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts(id).then(setPodcasts);
  }, [id]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts?.(id).then(setPodcasts);
  }, [id]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Podcasts({ fetchPodcasts, id }) {
  let [podcasts, setPodcasts] = useState(null);
  useEffect(() =&gt; {
    console.log(fetchPodcasts);
    fetchPodcasts?.(id).then(setPodcasts);
  }, [id]);
}
" time="0.003">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Thing() {
  useEffect(() =&gt; {
    const fetchData = async () =&gt; {};
    fetchData();
  }, [fetchData]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Thing() {
  useEffect(() =&gt; {
    const fetchData = async () =&gt; {};
    fetchData();
  }, [fetchData]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    setState({});
  });
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Hello() {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    setState({});
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Hello() {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData.then(setData);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Hello() {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData.then(setData);
  });
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Hello({ country }) {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData(country).then(setData);
  });
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Hello({ country }) {
  const [data, setData] = useState(0);
  useEffect(() =&gt; {
    fetchData(country).then(setData);
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Hello({ prop1, prop2 }) {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    if (prop1) {
      setState(prop2);
    }
  });
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Hello({ prop1, prop2 }) {
  const [state, setState] = useState(0);
  useEffect(() =&gt; {
    if (prop1) {
      setState(prop2);
    }
  });
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Thing() {
  useEffect(async () =&gt; {}, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Thing() {
  useEffect(async () =&gt; {}, []);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Thing() {
  useEffect(async () =&gt; {});
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Thing() {
  useEffect(async () =&gt; {});
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Example() {
  const foo = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    prop.hello(foo);
  }, [foo]);
  const bar = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Example({ prop }) {
  const foo = useCallback(() =&gt; {
    prop.hello(foo);
  }, [foo]);
  const bar = useCallback(() =&gt; {
    foo();
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  function myEffect() {
    console.log(local);
  }
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  const myEffect = function() {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  const myEffect = function() {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    otherThing();
  };
  const otherThing = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  const myEffect = () =&gt; {
    otherThing();
  };
  const otherThing = () =&gt; {
    console.log(local);
  };
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [local]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  const myEffect = debounce(() =&gt; {
    console.log(local);
  }, delay);
  useEffect(myEffect, [local]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({myEffect}) {
  useEffect(myEffect, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent({myEffect}) {
  useEffect(myEffect, []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(debounce(() =&gt; {
    console.log(local);
  }, delay), []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(debounce(() =&gt; {
    console.log(local);
  }, delay), []);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent() {
  const local = {};
  useEffect(() =&gt; {
    console.log(local);
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
    props.foo.bar.baz = 1;
  }, []);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function MyComponent(props) {
  let foo = {}
  useEffect(() =&gt; {
    foo.bar.baz = 43;
    props.foo.bar.baz = 1;
  }, []);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = [];
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = [];
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = () =&gt; {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = () =&gt; {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = function bar(){};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = function bar(){};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = class {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = class {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = true ? {} : &quot;fine&quot;;
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = true ? {} : &quot;fine&quot;;
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = bar || {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = bar || {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = bar ?? {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = bar ?? {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = bar &amp;&amp; {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = bar &amp;&amp; {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = bar ? baz ? {} : null : null;
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = bar ? baz ? {} : null : null;
  useMemo(() =&gt; foo, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  let foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  let foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.004">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  var foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  var foo = {};
  useMemo(() =&gt; foo, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = {};
  useCallback(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = {};
  useCallback(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = {};
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = {};
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = {};
  useImperativeHandle(
    ref,
    () =&gt; {
       console.log(foo);
    },
    [foo]
  );
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Component() {
  const foo = {};
  useImperativeHandle(
    ref,
    () =&gt; {
       console.log(foo);
    },
    [foo]
  );
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo(section) {
  const foo = section.section_components?.edges ?? [];
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo(section) {
  const foo = section.section_components?.edges ?? [];
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo(section) {
  const foo = {};
  console.log(foo);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo(section) {
  const foo = {};
  console.log(foo);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = &lt;&gt;Hi!&lt;/&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = &lt;&gt;Hi!&lt;/&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = &lt;div&gt;Hi!&lt;/div&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = &lt;div&gt;Hi!&lt;/div&gt;;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = bar = {};
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = bar = {};
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = new String(&apos;foo&apos;); // Note &apos;foo&apos; will be boxed, and thus an object and thus compared by reference.
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = new String(&apos;foo&apos;); // Note &apos;foo&apos; will be boxed, and thus an object and thus compared by reference.
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = new Map([]);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = new Map([]);
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = /reg/;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = /reg/;
  useMemo(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.001">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  class Bar {};
  useMemo(() =&gt; {
    console.log(new Bar());
  }, [Bar]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  class Bar {};
  useMemo(() =&gt; {
    console.log(new Bar());
  }, [Bar]);
}
" time="0.002">
    </testcase>
    <testcase classname="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" name="react-hooks parser: @typescript-eslint/parser@^5.0.0-0 invalid 
function Foo() {
  const foo = {};
  useLayoutEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
  useEffect(() =&gt; {
    console.log(foo);
  }, [foo]);
}
" time="0.002">
    </testcase>
  </testsuite>
</testsuites>